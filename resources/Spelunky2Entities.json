{
  // a mapping of entity type to its parent type
  "entity_class_hierarchy": {
    "Movable": "Entity",
    "PowerupCapable": "Movable",
    "Monster": "PowerupCapable",
    "Player": "PowerupCapable",
    "Arrowtrap": "Floor",
    "Container": "Movable",
    "Gun": "Purchasable",
    "CrushTrap": "Movable",
    "Mattock": "Purchasable",
    "Bomb": "Movable",
    "Olmec": "Movable",
    "OlmecFloater": "Movable",
    "Cape": "Backpack",
    "YellowCape": "Cape",
    "VladsCape": "Cape",
    "Powerup": "Movable",
    "KapalaPowerup": "Powerup",
    "Jiangshi": "Monster",
    "Ghost": "Monster",
    "Monkey": "Monster",
    "GoldMonkey": "Monster",
    "Mole": "Monster",
    "Spider": "Monster",
    "HangSpider": "Monster",
    "RoomOwner": "Monster",
    "Shopkeeper": "RoomOwner",
    "Yang": "RoomOwner",
    "Pet": "Monster",
    "WalkingMonster": "Monster",
    "CavemanShopkeeper": "WalkingMonster",
    "HornedLizard": "Monster",
    "Mosquito": "Monster",
    "Mantrap": "Monster",
    "Skeleton": "Monster",
    "Scarab": "Monster",
    "Tun": "RoomOwner",
    "Imp": "Monster",
    "Lavamander": "Monster",
    "Firebug": "Monster",
    "FirebugUnchained": "Monster",
    "Robot": "WalkingMonster",
    "Quillback": "WalkingMonster",
    "Leprechaun": "WalkingMonster",
    "Crocman": "WalkingMonster",
    "Mummy": "Monster",
    "NPC": "Monster",
    "VanHorsing": "NPC",
    "WitchDoctor": "WalkingMonster",
    "WitchDoctorSkull": "Monster",
    "ForestSister": "NPC",
    "Vampire": "Monster",
    "Vlad": "Vampire",
    "Waddler": "RoomOwner",
    "Octopus": "WalkingMonster",
    "Bodyguard": "NPC",
    "Fish": "Monster",
    "GiantFish": "Monster",
    "Crabman": "Monster",
    "Kingu": "Monster",
    "Anubis": "Monster",
    "Cobra": "Monster",
    "CatMummy": "Monster",
    "Sorceress": "WalkingMonster",
    "MagmaMan": "Monster",
    "Bee": "Monster",
    "Ammit": "Monster",
    "ApepPart": "Monster",
    "ApepHead": "ApepPart",
    "OsirisHead": "Monster",
    "OsirisHand": "Monster",
    "Alien": "Monster",
    "UFO": "Monster",
    "Lahamu": "Monster",
    "YetiQueen": "Monster",
    "YetiKing": "Monster",
    "Lamassu": "Monster",
    "Olmite": "WalkingMonster",
    "Tiamat": "Monster",
    "GiantFrog": "Monster",
    "Frog": "Monster",
    "FireFrog": "Frog",
    "Grub": "Monster",
    "Tadpole": "Monster",
    "GiantFly": "Monster",
    "Ghist": "Monster",
    "JumpDog": "Monster",
    "EggplantMinister": "Monster",
    "Yama": "Monster",
    "Hundun": "Monster",
    "HundunHead": "Monster",
    "MegaJellyfish": "Monster",
    "Scorpion": "Monster",
    "Hermitcrab": "Monster",
    "Necromancer": "WalkingMonster",
    "ProtoShopkeeper": "Monster",
    "Beg": "NPC",
    "Critter": "Monster",
    "CritterButterfly": "Critter",
    "CritterCrab": "Critter",
    "CritterLocust": "Critter",
    "CritterSnail": "Critter",
    "CritterFish": "Critter",
    "CritterPenguin": "Critter",
    "CritterFirefly": "Critter",
    "CritterDrone": "Critter",
    "CritterSlime": "Critter",
    "Mount": "PowerupCapable",
    "Rockdog": "Mount",
    "Axolotl": "Mount",
    "Mech": "Mount",
    "Qilin": "Mount",
    "Altar": "Floor",
    "Ushabti": "Movable",
    "Generator": "Floor",
    "ForceField": "Floor",
    "TimedForceField": "ForceField",
    "HorizontalForceField": "Floor",
    "StickyTrap": "Floor",
    "SpikeballTrap": "Floor",
    "SlidingWallCeiling": "Floor",
    "Projectile": "Movable",
    "Backpack": "Powerup",
    "Jetpack": "Backpack",
    "TeleporterBackpack": "Backpack",
    "Hoverpack": "Backpack",
    "Elevator": "Movable",
    "Boulder": "Movable",
    "Drill": "Movable",
    "UdjatSocket": "Movable",
    "PushBlock": "Movable",
    "TeleportingBorder": "Floor",
    "WoodenlogTrap": "Movable",
    "BoneBlock": "Movable",
    "TimedPowderkeg": "PushBlock",
    "ChainedPushBlock": "PushBlock",
    "LightArrowPlatform": "Movable",
    "FallingPlatform": "Movable",
    "TrapPart": "Movable",
    "UnchainedSpikeBall": "Movable",
    "ThinIce": "Movable",
    "ClamBase": "Movable",
    "RegenBlock": "Movable",
    "GiantClamTop": "Movable",
    "CookFire": "Torch",
    "Floor": "Entity",
    "Door": "Floor",
    "ExitDoor": "Door",
    "DecoratedDoor": "ExitDoor",
    "LockedDoor": "Door",
    "CityOfGoldDoor": "DecoratedDoor",
    "MainExit": "ExitDoor",
    "EggShipDoor": "Door",
    "TotemTrap": "Floor",
    "BigSpearTrap": "Floor",
    "LaserTrap": "Floor",
    "SparkTrap": "Floor",
    "TransferFloor": "Floor",
    "ConveyorBelt": "TransferFloor",
    "QuickSand": "Floor",
    "Pipe": "Floor",
    "MotherStatue": "Floor",
    "TentacleBottom": "Floor",
    "Flame": "Movable",
    "FlameSize": "Flame",
    "TorchFlame": "Flame",
    "LampFlame": "Flame",
    "PoleDeco": "Floor",
    "PunishBall": "Movable",
    "Chest": "Movable",
    "LiquidSurface": "Movable",
    "Liquid": "Entity",
    "Lava": "Liquid",
    "ClimbableRope": "Movable",
    "Pot": "Purchasable",
    "Coffin": "Movable",
    "SpecialShot": "LightEmitter",
    "Idol": "Movable",
    "Spear": "Movable",
    "JungleSpearCosmetic": "Movable",
    "WebShot": "Projectile",
    "LightEmitter": "Movable",
    "HangAnchor": "Movable",
    "HangStrand": "Movable",
    "Arrow": "Purchasable",
    "LightArrow": "Arrow",
    "LightShot": "Projectile",
    "ScepterShot": "LightEmitter",
    "SoundShot": "LightShot",
    "TimedShot": "LightShot",
    "CloneGunShot": "LightShot",
    "Bullet": "Projectile",
    "Spark": "Flame",
    "TiamatShot": "LightEmitter",
    "Fireball": "SoundShot",
    "Leaf": "Movable",
    "AcidBubble": "Movable",
    "Claw": "Movable",
    "StretchChain": "Movable",
    "Treasure": "Movable",
    "HundunChest": "Treasure",
    "Boombox": "Movable",
    "TV": "Movable",
    "Telescope": "Movable",
    "Torch": "Movable",
    "WallTorch": "Torch",
    "Chain": "Movable",
    "Fly": "Movable",
    "OlmecCannon": "Movable",
    "OlmecShip": "Movable",
    "Landmine": "LightEmitter",
    "Honey": "Movable",
    "PlayerGhost": "LightEmitter",
    "GhostBreath": "Projectile",
    "PlayerBag": "Movable",
    "LaserBeam": "Movable",
    "TreasureHook": "Movable",
    "AxolotlShot": "Projectile",
    "SkullDropTrap": "Movable",
    "FrozenLiquid": "Movable",
    "Switch": "Movable",
    "FlyHead": "Movable",
    "SnapTrap": "Movable",
    "EmpressGrave": "Movable",
    "Tentacle": "Chain",
    "MiniGameShip": "Movable",
    "MiniGameAsteroid": "Movable",
    "CursedPot": "Movable",
    "Orb": "Movable",
    "EggSac": "Movable",
    "Goldbar": "Movable",
    "Coin": "Movable",
    "RollingItem": "Purchasable",
    "ParachutePowerup": "Powerup",
    "TrueCrownPowerup": "Powerup",
    "AnkhPowerup": "Powerup",
    "Teleporter": "Purchasable",
    "Boomerang": "Purchasable",
    "Excalibur": "Movable",
    "Shield": "Purchasable",
    "Bat": "Monster",
    "Terra": "Monster",
    "CritterBeetle": "Critter",
    "Caveman": "WalkingMonster",
    "EggshipCenterJetFlame": "Movable",
    "MiniGameShipOffset": "Movable",
    "Button": "Movable",
    "FxTornJournalPage": "Movable",
    "FxMainExitDoor": "Movable",
    "Birdies": "Movable",
    "Explosion": "Movable",
    "FxOuroboroOccluder": "Movable",
    "FxOuroboroDragonPart": "Movable",
    "Rubble": "Movable",
    "FxCompass": "Movable",
    "Portal": "Entity",
    "SleepBubble": "Movable",
    "MovingIcon": "Movable",
    "FxSaleContainer": "Movable",
    "FxPickupEffect": "Movable",
    "FxShotgunBlast": "Movable",
    "FxJetpackFlame": "Movable",
    "FxPlayerIndicator": "Movable",
    "FxSpringtrapRing": "Movable",
    "FxWitchdoctorHint": "Movable",
    "FxNecromancerANKH": "Movable",
    "FxWebbedEffect": "Movable",
    "FxUnderwaterBubble": "Movable",
    "FxWaterDrop": "Movable",
    "FxKinguSliding": "Movable",
    "FxAlienBlast": "Movable",
    "FxSparkSmall": "Movable",
    "FxTiamatHead": "Movable",
    "FxTiamatTorso": "Movable",
    "FxTiamatTail": "Movable",
    "FxVatBubble": "Movable",
    "FxHundunNeckPiece": "Movable",
    "FxJellyfishStar": "Movable",
    "FxQuickSand": "Movable",
    "FxSorceressAttack": "Movable",
    "FxLamassuAttack": "Movable",
    "FxFireflyLight": "Movable",
    "FxEmpress": "Movable",
    "FxAnkhRotatingSpark": "Movable",
    "FxAnkhBrokenPiece": "Movable",
    "BGBackLayerDoor": "Entity",
    "BGSurfaceStar": "Entity",
    "BGRelativeElement": "Entity",
    "BGSurfaceLayer": "BGRelativeElement",
    "BGEggshipRoom": "Entity",
    "BGMovingStar": "BGSurfaceStar",
    "BGTutorialSign": "Entity",
    "ShootingStarSpawner": "Entity",
    "BGShootingStar": "BGRelativeElement",
    "BGShopEntrance": "Entity",
    "BGFloatingDebris": "BGSurfaceLayer",
    "BGShopKeeperPrime": "Entity",
    "LogicalDoor": "Entity",
    "LogicalStaticSound": "LogicalSound",
    "LogicalLiquidStreamSound": "LogicalStaticSound",
    "LogicalSound": "Entity",
    "LogicalTrapTrigger": "Entity",
    "JungleTrapTrigger": "LogicalTrapTrigger",
    "WetEffect": "Entity",
    "OnFireEffect": "Entity",
    "PoisonedEffect": "Entity",
    "CursedEffect": "Entity",
    "OuroboroCameraAnchor": "Entity",
    "OuroboroCameraZoomin": "Entity",
    "CinematicAnchor": "Entity",
    "BurningRopeEffect": "Entity",
    "DustWallApep": "Entity",
    "CameraFlash": "Entity",
    "RoomLight": "Entity",
    "LimbAnchor": "Entity",
    "LogicalConveyorbeltSound": "LogicalSound",
    "LogicalAnchovyFlock": "Entity",
    "MummyFliesSound": "LogicalSound",
    "QuickSandSound": "LogicalSound",
    "IceSlidingSound": "LogicalSound",
    "FrostBreathEffect": "Entity",
    "BoulderSpawner": "Entity",
    "PipeTravelerSound": "LogicalSound",
    "LogicalDrain": "Entity",
    "LogicalRegeneratingBlock": "Entity",
    "SplashBubbleGenerator": "Entity",
    "EggplantThrower": "Entity",
    "LogicalMiniGame": "Entity",
    "DMSpawning": "Entity",
    "DMAlienBlast": "Entity",
    "CrossBeam": "Entity",
    "PalaceSign": "Entity",
    "DecoRegeneratingBlock": "Entity",
    "DestructibleBG": "Entity",
    "EggShipDoorS": "EggShipDoor",
    "PrizeDispenser": "Movable",
    "JungleSpearTrap": "Floor",
    "MegaJellyfishEye": "Movable",
    "Bow": "Purchasable",
    "Purchasable": "Movable",
    "DummyPurchasableEntity": "Purchasable",
    "Present": "Purchasable",
    "Web": "Movable",
    "CrushElevator": "Movable",
    "Scepter": "Movable",
    "Whip": "Movable"
  },
  // a mapping of a regular expression or full name of an entity to its type
  "default_entity_types": {
    "FLOOR_DOOR_ENTRANCE": "Door",
    "FLOOR_DOOR_EXIT": "ExitDoor",
    "FLOOR_DOOR_MAIN_EXIT": "MainExit",
    "FLOOR_DOOR_STARTING_EXIT": "ExitDoor",
    "FLOOR_DOOR_LOCKED.*": "LockedDoor",
    "FLOOR_DOOR_COG": "CityOfGoldDoor",
    "FLOOR_DOOR_EGGSHIP": "EggShipDoorS",
    "FLOOR_DOOR_EGGSHIP_.*": "EggShipDoor",
    "FLOOR_DOOR_EGGPLANT_WORLD": "DecoratedDoor",
    "FLOOR_DOOR_PLATFORM": "Floor",
    "FLOOR_DOOR_.*": "Door",
    "FLOOR_.*ARROW_TRAP": "Arrowtrap",
    "FLOOR_TOTEM_TRAP": "TotemTrap",
    "FLOOR_JUNGLE_SPEAR_TRAP": "JungleSpearTrap",
    "FLOOR_LION_TRAP": "TotemTrap",
    "FLOOR_LASER_TRAP": "LaserTrap",
    "FLOOR_SPARK_TRAP": "SparkTrap",
    "FLOOR_.*ALTAR": "Altar",
    "FLOOR_SPIKEBALL_CEILING": "SpikeballTrap",
    "FLOOR_CONVEYORBELT_.*": "ConveyorBelt",
    "FLOOR_.*_GENERATOR": "Generator",
    "FLOOR_SLIDINGWALL_CEILING": "SlidingWallCeiling",
    "FLOOR_QUICKSAND": "QuickSand",
    "FLOOR_PIPE": "Pipe",
    "FLOOR_BIGSPEAR_TRAP": "BigSpearTrap",
    "FLOOR_STICKYTRAP_CEILING": "StickyTrap",
    "FLOOR_MOTHER_STATUE": "MotherStatue",
    "FLOOR_TELEPORTINGBORDER": "TeleportingBorder",
    "FLOOR_HORIZONTAL_FORCEFIELD": "HorizontalForceField",
    "FLOOR_TIMED_FORCEFIELD": "TimedForceField",
    "FLOOR_.*FORCEFIELD": "ForceField",
    "FLOOR_CHALLENGE_.*": "ForceField",
    "FLOOR_TENTACLE_BOTTOM": "TentacleBottom",
    "FLOORSTYLED_MINEWOOD": "PoleDeco",
    "FLOORSTYLED_PAGODA": "PoleDeco",
    "DECORATION_CROSS_BEAM": "CrossBeam",
    "DECORATION_CHAINANDBLOCKS_CHAINDECORATION": "Movable",
    "DECORATION_SLIDINGWALL_CHAINDECORATION": "Movable",
    "DECORATION_DUAT_DESTRUCTIBLE_BG": "DestructibleBG",
    "DECORATION_PALACE_SIGN": "PalaceSign",
    "DECORATION_REGENERATING_SMALL_BLOCK": "DecoRegeneratingBlock",
    "DECORATION_REGENERATING_BORDER": "DecoRegeneratingBlock",
    "MONS_SPIDER": "Spider",
    "MONS_HANGSPIDER": "HangSpider",
    "MONS_GIANTSPIDER": "Spider",
    "MONS_BAT": "Bat",
    "MONS_CAVEMAN": "Caveman",
    "MONS_CAVEMAN_SHOPKEEPER": "CavemanShopkeeper",
    "MONS_SKELETON": "Skeleton",
    "MONS_REDSKELETON": "Skeleton",
    "MONS_SCORPION": "Scorpion",
    "MONS_HORNEDLIZARD": "HornedLizard",
    "MONS_MOLE": "Mole",
    "MONS_CAVEMAN_BOSS": "Quillback",
    "MONS_MANTRAP": "Mantrap",
    "MONS_TIKIMAN": "WalkingMonster",
    "MONS_WITCHDOCTOR": "WitchDoctor",
    "MONS_WITCHDOCTORSKULL": "WitchDoctorSkull",
    "MONS_MOSQUITO": "Mosquito",
    "MONS_MONKEY": "Monkey",
    "MONS_MAGMAMAN": "MagmaMan",
    "MONS_ROBOT": "Robot",
    "MONS_FIREBUG": "Firebug",
    "MONS_FIREBUG_UNCHAINED": "FirebugUnchained",
    "MONS_IMP": "Imp",
    "MONS_LAVAMANDER": "Lavamander",
    "MONS_VAMPIRE": "Vampire",
    "MONS_VLAD": "Vlad",
    "MONS_CROCMAN": "Crocman",
    "MONS_COBRA": "Cobra",
    "MONS_MUMMY": "Mummy",
    "MONS_SORCERESS": "Sorceress",
    "MONS_CATMUMMY": "CatMummy",
    "MONS_NECROMANCER": "Necromancer",
    "MONS_ANUBIS": "Anubis",
    "MONS_APEP_HEAD": "ApepHead",
    "MONS_APEP_BODY": "ApepPart",
    "MONS_APEP_TAIL": "ApepPart",
    "MONS_OSIRIS_HEAD": "OsirisHead",
    "MONS_OSIRIS_HAND": "OsirisHand",
    "MONS_ANUBIS2": "Anubis",
    "MONS_JIANGSHI": "Jiangshi",
    "MONS_FEMALE_JIANGSHI": "Jiangshi",
    "MONS_FISH": "Fish",
    "MONS_OCTOPUS": "Octopus",
    "MONS_HERMITCRAB": "Hermitcrab",
    "MONS_GIANTFISH": "GiantFish",
    "MONS_UFO": "UFO",
    "MONS_ALIEN": "Alien",
    "MONS_YETI": "WalkingMonster",
    "MONS_YETIKING": "YetiKing",
    "MONS_YETIQUEEN": "YetiQueen",
    "MONS_ALIENQUEEN": "Lahamu",
    "MONS_PROTOSHOPKEEPER": "ProtoShopkeeper",
    "MONS_SHOPKEEPERCLONE": "NPC",
    "MONS_LAMASSU": "Lamassu",
    "MONS_OLMITE_.*": "Olmite",
    "MONS_BEE": "Bee",
    "MONS_QUEENBEE": "Bee",
    "MONS_AMMIT": "Ammit",
    "MONS_KINGU": "Kingu",
    "MONS_TIAMAT": "Tiamat",
    "MONS_FROG": "Frog",
    "MONS_FIREFROG": "FireFrog",
    "MONS_GIANTFROG": "GiantFrog",
    "MONS_GRUB": "Grub",
    "MONS_TADPOLE": "Tadpole",
    "MONS_GIANTFLY": "GiantFly",
    "MONS_JUMPDOG": "JumpDog",
    "MONS_EGGPLANT_MINISTER": "EggplantMinister",
    "MONS_YAMA": "Yama",
    "MONS_HUNDUN": "Hundun",
    "MONS_HUNDUN_BIRDHEAD": "HundunHead",
    "MONS_HUNDUN_SNAKEHEAD": "HundunHead",
    "MONS_SCARAB": "Scarab",
    "MONS_SHOPKEEPER": "Shopkeeper",
    "MONS_MERCHANT": "Tun",
    "MONS_YANG": "Yang",
    "MONS_MARLA_TUNNEL": "Terra",
    "MONS_SISTER_.*": "ForestSister",
    "MONS_OLD_HUNTER": "VanHorsing",
    "MONS_THIEF": "NPC",
    "MONS_MADAMETUSK": "RoomOwner",
    "MONS_BODYGUARD": "Bodyguard",
    "MONS_HUNDUNS_SERVANT": "Beg",
    "MONS_STORAGEGUY": "Waddler",
    "MONS_GOLDMONKEY": "GoldMonkey",
    "MONS_LEPRECHAUN": "Leprechaun",
    "MONS_CRABMAN": "Crabman",
    "MONS_MEGAJELLYFISH": "MegaJellyfish",
    "MONS_MEGAJELLYFISH_BACKGROUND": "MegaJellyfish",
    "MONS_GHIST": "Ghist",
    "MONS_GHIST_SHOPKEEPER": "Ghist",
    "MONS_GHOST.*": "Ghost",
    "MONS_PET_.*": "Pet",
    "MONS_CRITTERDUNGBEETLE": "CritterBeetle",
    "MONS_CRITTERBUTTERFLY": "CritterButterfly",
    "MONS_CRITTERSNAIL": "CritterSnail",
    "MONS_CRITTERFISH": "CritterFish",
    "MONS_CRITTERANCHOVY": "Critter",
    "MONS_CRITTERCRAB": "CritterCrab",
    "MONS_CRITTERLOCUST": "CritterLocust",
    "MONS_CRITTERPENGUIN": "CritterPenguin",
    "MONS_CRITTERFIREFLY": "CritterFirefly",
    "MONS_CRITTERDRONE": "CritterDrone",
    "MONS_CRITTERSLIME": "CritterSlime",
    "ITEM_ROCK": "Purchasable",
    "ITEM_SKULL": "Purchasable",
    "ITEM_MACHETE": "Purchasable",
    "ITEM_WHIP": "Whip",
    "ITEM_WHIP_FLAME": "FlameSize",
    "ITEM_BOMB": "Bomb",
    "ITEM_PASTEBOMB": "Bomb",
    "ITEM_CLIMBABLE_ROPE": "ClimbableRope",
    "ITEM_UNROLLED_ROPE": "ClimbableRope",
    "ITEM_IDOL": "Idol",
    "ITEM_MADAMETUSK_IDOL": "Idol",
    "ITEM_TOTEM_SPEAR": "Spear",
    "ITEM_JUNGLE_SPEAR_COSMETIC": "JungleSpearCosmetic",
    "ITEM_LION_SPEAR": "Spear",
    "ITEM_BIG_SPEAR": "Spear",
    "ITEM_WEB": "Web",
    "ITEM_WEBSHOT": "WebShot",
    "ITEM_GIANTSPIDER_WEBSHOT": "Projectile",
    "ITEM_HANGSTRAND": "HangStrand",
    "ITEM_HANGANCHOR": "HangAnchor",
    "ITEM_WOODEN_ARROW": "Arrow",
    "ITEM_METAL_ARROW": "Arrow",
    "ITEM_LIGHT_ARROW": "LightArrow",
    "ITEM_PLASMACANNON_SHOT": "LightShot",
    "ITEM_SCEPTER_ANUBISSHOT": "ScepterShot",
    "ITEM_SCEPTER_ANUBISSPECIALSHOT": "SpecialShot",
    "ITEM_SCEPTER_PLAYERSHOT": "ScepterShot",
    "ITEM_UFO_LASER_SHOT": "SoundShot",
    "ITEM_LAMASSU_LASER_SHOT": "SoundShot",
    "ITEM_SORCERESS_DAGGER_SHOT": "LightShot",
    "ITEM_LASERTRAP_SHOT": "LightShot",
    "ITEM_SPARK": "Spark",
    "ITEM_TIAMAT_SHOT": "TiamatShot",
    "ITEM_FIREBALL": "Fireball",
    "ITEM_HUNDUN_FIREBALL": "Fireball",
    "ITEM_FLAMETHROWER_FIREBALL": "Flame",
    "ITEM_LEAF": "Leaf",
    "ITEM_CRABMAN_ACIDBUBBLE": "AcidBubble",
    "ITEM_CRABMAN_CLAW": "Claw",
    "ITEM_CRABMAN_CLAWCHAIN": "StretchChain",
    "ITEM_CHEST": "Chest",
    "ITEM_ENDINGTREASURE_TIAMAT": "Treasure",
    "ITEM_ENDINGTREASURE_HUNDUN": "HundunChest",
    "ITEM_CRATE": "Container",
    "ITEM_DMCRATE": "Container",
    "ITEM_BOOMBOX": "Boombox",
    "ITEM_TV": "TV",
    "ITEM_TELESCOPE": "Telescope",
    "ITEM_WALLTORCH": "WallTorch",
    "ITEM_WALLTORCHFLAME": "FlameSize",
    "ITEM_LITWALLTORCH": "WallTorch",
    "ITEM_AUTOWALLTORCH": "WallTorch",
    "ITEM_TORCH": "Torch",
    "ITEM_TORCHFLAME": "TorchFlame",
    "ITEM_LAMP": "Torch",
    "ITEM_LAMPFLAME": "LampFlame",
    "ITEM_REDLANTERN": "Torch",
    "ITEM_REDLANTERNFLAME": "LightEmitter",
    "ITEM_PRESENT": "Present",
    "ITEM_GHIST_PRESENT": "Present",
    "ITEM_BULLET": "Bullet",
    "ITEM_FREEZERAYSHOT": "TimedShot",
    "ITEM_CLONEGUNSHOT": "CloneGunShot",
    "ITEM_PUNISHBALL": "PunishBall",
    "ITEM_PUNISHCHAIN": "StretchChain",
    "ITEM_CHAIN": "Chain",
    "ITEM_CHAIN_LASTPIECE": "Chain",
    "ITEM_SLIDINGWALL_CHAIN": "Chain",
    "ITEM_SLIDINGWALL_CHAIN_LASTPIECE": "Chain",
    "ITEM_.*COFFIN": "Coffin",
    "ITEM_FLY": "Fly",
    "ITEM_OLMECCANNON_BOMBS": "OlmecCannon",
    "ITEM_OLMECCANNON_UFO": "OlmecCannon",
    "ITEM_OLMECSHIP": "OlmecShip",
    "ITEM_EGGSHIP": "OlmecShip",
    "ITEM_PARENTSSHIP": "OlmecShip",
    "ITEM_LANDMINE": "Landmine",
    "ITEM_UDJAT_SOCKET": "UdjatSocket",
    "ITEM_USHABTI": "Ushabti",
    "ITEM_HONEY": "Honey",
    "ITEM_GIANTCLAM_TOP": "GiantClamTop",
    "ITEM_PLAYERGHOST": "PlayerGhost",
    "ITEM_PLAYERGHOST_BREATH": "GhostBreath",
    "ITEM_DICE_PRIZE_DISPENSER": "PrizeDispenser",
    "ITEM_LASERBEAM": "LaserBeam",
    "ITEM_HORIZONTALLASERBEAM": "LaserBeam",
    "ITEM_EGGSHIP_HOOK": "TreasureHook",
    "ITEM_AXOLOTL_BUBBLESHOT": "AxolotlShot",
    "ITEM_STICKYTRAP_PIECE": "Chain",
    "ITEM_STICKYTRAP_LASTPIECE": "Chain",
    "ITEM_STICKYTRAP_BALL": "TrapPart",
    "ITEM_SKULLDROPTRAP": "SkullDropTrap",
    "ITEM_FROZEN_LIQUID": "FrozenLiquid",
    "ITEM_ALIVE_EMBEDDED_ON_ICE": "Container",
    "ITEM_SLIDINGWALL_SWITCH.*": "Switch",
    "ITEM_GIANTFLY_HEAD": "FlyHead",
    "ITEM_PALACE_CANDLE_FLAME": "LightEmitter",
    "ITEM_SNAP_TRAP": "SnapTrap",
    "ITEM_EMPRESS_GRAVE": "EmpressGrave",
    "ITEM_TENTACLE": "Tentacle",
    "ITEM_TENTACLE_.*": "Chain",
    "ITEM_MINIGAME_SHIP": "MiniGameShip",
    "ITEM_MINIGAME_.*ASTEROID.*": "MiniGameAsteroid",
    "ITEM_POT": "Pot",
    "ITEM_CURSEDPOT": "CursedPot",
    "ITEM_COOKFIRE": "CookFire",
    "ITEM_LAVAPOT": "LightEmitter",
    "ITEM_FLOATING_ORB": "Orb",
    "ITEM_EGGSAC": "EggSac",
    "ITEM_GOLDBAR.*": "Goldbar",
    "ITEM_GOLDCOIN": "Coin",
    "ITEM_CROSSBOW": "Bow",
    "ITEM_HOUYIBOW": "Bow",
    "ITEM_PICKUP_PLAYERBAG": "PlayerBag",
    "ITEM_PICKUP_12BAG": "PlayerBag",
    "ITEM_PICKUP_24BAG": "PlayerBag",
    "ITEM_PICKUP_.*": "RollingItem",
    "ITEM_POWERUP_KAPALA": "KapalaPowerup",
    "ITEM_POWERUP_PARACHUTE": "ParachutePowerup",
    "ITEM_POWERUP_TRUECROWN": "TrueCrownPowerup",
    "ITEM_POWERUP_ANKH": "AnkhPowerup",
    "ITEM_POWERUP_.*": "Powerup",
    "ITEM_CAPE": "YellowCape",
    "ITEM_VLADS_CAPE": "VladsCape",
    "ITEM_JETPACK.*": "Jetpack",
    "ITEM_TELEPORTER_BACKPACK": "TeleporterBackpack",
    "ITEM_HOVERPACK": "Hoverpack",
    "ITEM_POWERPACK": "Backpack",
    "ITEM_WEBGUN": "Gun",
    "ITEM_SHOTGUN": "Gun",
    "ITEM_FREEZERAY": "Gun",
    "ITEM_CAMERA": "Gun",
    "ITEM_TELEPORTER": "Teleporter",
    "ITEM_MATTOCK": "Mattock",
    "ITEM_BOOMERANG": "Boomerang",
    "ITEM_EXCALIBUR": "Excalibur",
    "ITEM_PLASMACANNON": "Gun",
    "ITEM_SCEPTER": "Scepter",
    "ITEM_CLONEGUN": "Gun",
    "ITEM_WOODEN_SHIELD": "Shield",
    "ITEM_METAL_SHIELD": "Shield",
    "ITEM_PURCHASABLE_CAPE": "Purchasable",
    "ITEM_PURCHASABLE_JETPACK": "DummyPurchasableEntity",
    "ITEM_PURCHASABLE_TELEPORTER_BACKPACK": "DummyPurchasableEntity",
    "ITEM_PURCHASABLE_HOVERPACK": "DummyPurchasableEntity",
    "ITEM_PURCHASABLE_POWERPACK": "DummyPurchasableEntity",
    "ACTIVEFLOOR_WOODENLOG_TRAP": "WoodenlogTrap",
    "ACTIVEFLOOR_BOULDER": "Boulder",
    "ACTIVEFLOOR_PUSHBLOCK": "PushBlock",
    "ACTIVEFLOOR_BONEBLOCK": "BoneBlock",
    "ACTIVEFLOOR_POWDERKEG": "PushBlock",
    "ACTIVEFLOOR_CHAINEDPUSHBLOCK": "ChainedPushBlock",
    "ACTIVEFLOOR_LIGHTARROWPLATFORM": "LightArrowPlatform",
    "ACTIVEFLOOR_FALLING_PLATFORM": "FallingPlatform",
    "ACTIVEFLOOR_CHAINED_SPIKEBALL": "TrapPart",
    "ACTIVEFLOOR_UNCHAINED_SPIKEBALL": "UnchainedSpikeBall",
    "ACTIVEFLOOR_DRILL": "Drill",
    "ACTIVEFLOOR_CRUSH_TRAP.*": "CrushTrap",
    "ACTIVEFLOOR_OLMEC": "Olmec",
    "ACTIVEFLOOR_TIMEDPOWDERKEG": "TimedPowderkeg",
    "ACTIVEFLOOR_SLIDINGWALL": "TrapPart",
    "ACTIVEFLOOR_THINICE": "ThinIce",
    "ACTIVEFLOOR_ELEVATOR": "Elevator",
    "ACTIVEFLOOR_GIANTCLAM_BASE": "ClamBase",
    "ACTIVEFLOOR_CRUSHING_ELEVATOR": "CrushElevator",
    "ACTIVEFLOOR_REGENERATINGBLOCK": "RegenBlock",
    "FX_EGGSHIP_CENTERJETFLAME": "EggshipCenterJetFlame",
    "FX_TORNJOURNALPAGE": "FxTornJournalPage",
    "FX_MAIN_EXIT_DOOR": "FxMainExitDoor",
    "FX_BIRDIES": "Birdies",
    "FX_.*EXPLOSION": "Explosion",
    "FX_OUROBORO_OCCLUDER": "FxOuroboroOccluder",
    "FX_OUROBORO_HEAD": "FxOuroboroDragonPart",
    "FX_OUROBORO_TAIL": "FxOuroboroDragonPart",
    "ITEM_RUBBLE": "Rubble",
    "FX_COMPASS": "FxCompass",
    "FX_SPECIALCOMPASS": "FxCompass",
    "FX_SALEICON": "MovingIcon",
    "FX_SALEDIALOG_CONTAINER": "FxSaleContainer",
    "FX_PICKUPEFFECT": "FxPickupEffect",
    "FX_SHOTGUNBLAST": "FxShotgunBlast",
    "FX_JETPACKFLAME": "FxJetpackFlame",
    "FX_PLAYERINDICATOR": "FxPlayerIndicator",
    "FX_SMALLFLAME": "Flame",
    "FX_SPRINGTRAP_RING": "FxSpringtrapRing",
    "FX_WITCHDOCTOR_HINT": "FxWitchdoctorHint",
    "FX_NECROMANCER_ANKH": "FxNecromancerANKH",
    "FX_TELEPORTSHADOW": "LightEmitter",
    "FX_OLMECPART_FLOATER": "OlmecFloater",
    "FX_WEBBEDEFFECT": "FxWebbedEffect",
    "FX_BUTTON": "Button",
    "FX_SLEEP_BUBBLE": "SleepBubble",
    "FX_LAVA_GLOW": "LiquidSurface",
    "FX_UNDERWATER_BUBBLE": "FxUnderwaterBubble",
    "FX_WATER_DROP": "FxWaterDrop",
    "FX_WATER_SURFACE": "LiquidSurface",
    "FX_KINGU_SLIDING": "FxKinguSliding",
    "FX_ALIENBLAST.*": "FxAlienBlast",
    "FX_SPARK_SMALL": "FxSparkSmall",
    "FX_TIAMAT_HEAD": "FxTiamatHead",
    "FX_TIAMAT_TORSO": "FxTiamatTorso",
    "FX_TIAMAT_TAIL.*": "FxTiamatTail",
    "FX_DIEINDICATOR": "MovingIcon",
    "FX_STORAGE_INDICATOR": "MovingIcon",
    "FX_VAT_BUBBLE": "FxVatBubble",
    "FX_HUNDUN_NECK_PIECE": "FxHundunNeckPiece",
    "FX_MEGAJELLYFISH_EYE": "MegaJellyfishEye",
    "FX_MEGAJELLYFISH_STAR": "FxJellyfishStar",
    "FX_QUICKSAND_DUST": "FxQuickSand",
    "FX_QUICKSAND_RUBBLE": "FxQuickSand",
    "FX_SORCERESS_ATTACK": "FxSorceressAttack",
    "FX_LAMASSU_ATTACK": "FxLamassuAttack",
    "FX_CRITTERFIREFLY_LIGHT": "FxFireflyLight",
    "FX_EMPRESS": "FxEmpress",
    "FX_MINIGAME_SHIP_DOOR": "MiniGameShipOffset",
    "FX_MINIGAME_SHIP_CENTERJETFLAME": "MiniGameShipOffset",
    "FX_MINIGAME_SHIP_JETFLAME": "MiniGameShipOffset",
    "FX_ANKH_ROTATINGSPARK": "FxAnkhRotatingSpark",
    "FX_ANKH_BROKENPIECE": "FxAnkhBrokenPiece",
    "BG_SURFACE_STAR": "BGSurfaceStar",
    "BG_SURFACE_SHOOTING_STAR": "BGShootingStar",
    "BG_SURFACE_SHOOTING_STAR_TRAIL": "BGRelativeElement",
    "BG_SURFACE_SHOOTING_STAR_TRAIL_PARTICLE": "BGRelativeElement",
    "BG_SURFACE_MOVING_STAR": "BGMovingStar",
    "BG_SURFACE_NEBULA": "BGRelativeElement",
    "BG_SURFACE_LAYER": "BGSurfaceLayer",
    "BG_SURFACE_ENTITY": "BGSurfaceLayer",
    "BG_SURFACE_OLMEC_LAYER": "BGSurfaceLayer",
    "BG_CONSTELLATION_STAR": "BGSurfaceStar",
    "BG_CONSTELLATION_CONNECTION": "BGSurfaceStar",
    "BG_EGGSHIP_ROOM": "BGEggshipRoom",
    "BG_DOOR_BACK_LAYER": "BGBackLayerDoor",
    "BG_TUTORIAL_SIGN_.*": "BGTutorialSign",
    "BG_SHOP_ENTRANCEDOOR": "BGShopEntrance",
    "BG_DUAT_LAYER": "BGSurfaceLayer",
    "BG_DUAT_PYRAMID_LAYER": "BGSurfaceLayer",
    "BG_DUAT_FLOATINGDEBRIS": "BGFloatingDebris",
    "BG_DUAT_FARFLOATINGDEBRIS": "BGFloatingDebris",
    "BG_VAT_SHOPKEEPER_PRIME": "BGShopKeeperPrime",
    "BG_COSMIC_FLOATINGDEBRIS": "BGFloatingDebris",
    "BG_COSMIC_FARFLOATINGDEBRIS": "BGFloatingDebris",
    "LOGICAL_SHOOTING_STARS_SPAWNER": "ShootingStarSpawner",
    "LOGICAL_DOOR": "LogicalDoor",
    "LOGICAL_DOOR_AMBIENT_SOUND": "LogicalSound",
    "LOGICAL_BLACKMARKET_DOOR": "LogicalDoor",
    "LOGICAL_ARROW_TRAP_TRIGGER": "LogicalTrapTrigger",
    "LOGICAL_TOTEM_TRAP_TRIGGER": "LogicalTrapTrigger",
    "LOGICAL_JUNGLESPEAR_TRAP_TRIGGER": "JungleTrapTrigger",
    "LOGICAL_SPIKEBALL_TRIGGER": "LogicalTrapTrigger",
    "LOGICAL_TENTACLE_TRIGGER": "LogicalTrapTrigger",
    "LOGICAL_WET_EFFECT": "WetEffect",
    "LOGICAL_ONFIRE_EFFECT": "OnFireEffect",
    "LOGICAL_POISONED_EFFECT": "PoisonedEffect",
    "LOGICAL_CURSED_EFFECT": "CursedEffect",
    "LOGICAL_OUROBORO_CAMERA_ANCHOR": "OuroboroCameraAnchor",
    "LOGICAL_OUROBORO_CAMERA_ANCHOR_ZOOMIN": "OuroboroCameraZoomin",
    "LOGICAL_CINEMATIC_ANCHOR": "CinematicAnchor",
    "LOGICAL_BURNING_ROPE_EFFECT": "BurningRopeEffect",
    "LOGICAL_DUSTWALL_APEP": "DustWallApep",
    "LOGICAL_CAMERA_FLASH": "CameraFlash",
    "LOGICAL_ROOM_LIGHT": "RoomLight",
    "LOGICAL_LIMB_ANCHOR": "LimbAnchor",
    "LOGICAL_PORTAL": "Portal",
    "LOGICAL_STATICLAVA_SOUND_SOURCE": "LogicalStaticSound",
    "LOGICAL_STREAMLAVA_SOUND_SOURCE": "LogicalLiquidStreamSound",
    "LOGICAL_STREAMWATER_SOUND_SOURCE": "LogicalLiquidStreamSound",
    "LOGICAL_CONVEYORBELT_SOUND_SOURCE": "LogicalConveyorbeltSound",
    "LOGICAL_ANCHOVY_FLOCK": "LogicalAnchovyFlock",
    "LOGICAL_MUMMYFLIES_SOUND_SOURCE": "MummyFliesSound",
    "LOGICAL_QUICKSAND_AMBIENT_SOUND_SOURCE": "LogicalStaticSound",
    "LOGICAL_QUICKSAND_SOUND_SOURCE": "QuickSandSound",
    "LOGICAL_DUSTWALL_SOUND_SOURCE": "LogicalSound",
    "LOGICAL_ICESLIDING_SOUND_SOURCE": "IceSlidingSound",
    "LOGICAL_PIPE_TRAVELER_SOUND_SOURCE": "PipeTravelerSound",
    "LOGICAL_BOULDERSPAWNER": "BoulderSpawner",
    "LOGICAL_WATER_DRAIN": "LogicalDrain",
    "LOGICAL_LAVA_DRAIN": "LogicalDrain",
    "LOGICAL_REGENERATING_BLOCK": "LogicalRegeneratingBlock",
    "LOGICAL_BIGSPEAR_TRAP_TRIGGER": "LogicalTrapTrigger",
    "LOGICAL_DM_ALIEN_BLAST": "DMAlienBlast",
    "LOGICAL_DM_CRATE_SPAWNING": "DMSpawning",
    "LOGICAL_DM_IDOL_SPAWNING": "DMSpawning",
    "LOGICAL_SPLASH_BUBBLE_GENERATOR": "SplashBubbleGenerator",
    "LOGICAL_FROST_BREATH": "FrostBreathEffect",
    "LOGICAL_EGGPLANT_THROWER": "EggplantThrower",
    "LOGICAL_MINIGAME": "LogicalMiniGame",
    "MOUNT_TURKEY": "Mount",
    "MOUNT_ROCKDOG": "Rockdog",
    "MOUNT_AXOLOTL": "Axolotl",
    "MOUNT_MECH": "Mech",
    "MOUNT_QILIN": "Qilin",
    "MOUNT_BASECAMP_CHAIR": "Mount",
    "MOUNT_BASECAMP_COUCH": "Mount",
    "LIQUID_IMPOSTOR_LAKE": "Entity",
    "LIQUID_IMPOSTOR_LAVA": "Entity",
    "LIQUID_.*LAVA": "Lava",
    // general fallback
    "FLOOR_.*": "Floor",
    "FLOORSTYLED_.*": "Floor",
    "DECORATION_.*": "Entity",
    "EMBED_.*": "Floor",
    "CHAR_.*": "Player",
    "MONS_.*": "Monster",
    "ITEM_.*": "Movable",
    "ACTIVEFLOOR_.*": "Movable",
    "FX_.*": "Movable",
    "BG_.*": "Entity",
    "MIDBG.*": "Entity",
    "LOGICAL_.*": "Entity",
    "MOUNT_.*": "Mount", // just for completeness
    "LIQUID_.*": "Liquid"
  },
  // a list of all the fields within the entity types
  "fields": {
    "Entity": [
      {
        "field": "__vftable",
        "type": "VirtualFunctionTable",
        "functions": {
          "0": { "name": "~Entity", "params": "", "return": "" },
          "1": {
            "name": "create_rendering_info"
          },
          "2": {
            "name": "handle_state_machine"
          },
          "3": {
            "name": "kill",
            "params": "bool destroy_corpse, Entity* responsible"
          },
          "4": {
            "name": "on_collision1",
            "params": "Entity* other_entity",
            "comment": "Collisions with stuff that blocks you, like walls, floors, etc. Triggers for entities in it's EntityDB.collision_mask"
          },
          "5": {
            "name": "destroy"
          },
          "6": {
            "name": "apply_texture",
            "params": "Texture*"
          },
          "7": {
            "name": "format_shopitem_name",
            "params": "char16_t* output"
          },
          "8": {
            "name": "generate_damage_particles",
            "params": "Entity* victim, DAMAGE_TYPE damage, bool killing"
          },
          "9": {
            "name": "get_type_field_a8",
            "return": "float"
          },
          "10": {
            "name": "can_be_pushed",
            "return": "bool",
            "comment": "(runs only for activefloors?) checks if entity type is pushblock, for chained push block checks ChainedPushBlock.is_chained, is only a check that allows for the pushing animation"
          },
          "11": {
            "name": "v11",
            "return": "bool",
            "comment": "for arrows: returns true if it's moving (for y possibly checks for some speed as well?)"
          },
          "12": {
            "name": "is_in_liquid",
            "return": "bool",
            "comment": "drill always returns false"
          },
          "13": {
            "name": "check_type_properties_flags_19",
            "return": "bool",
            "comment": "checks (properties_flags >> 0x12) & 1; for hermitcrab checks if he's invisible; can't get it to trigger"
          },
          "14": {
            "name": "get_type_field_60",
            "return": "uint8_t",
            "comment": "the value is compared to entity state and used in some behavior function"
          },
          "15": { "name": "set_invisible", "params": "bool value" },
          "16": {
            "name": "flip",
            "params": "bool left"
          },
          "17": {
            "name": "set_draw_depth",
            "params": "uint8_t draw_depth, uint8_t b3f"
          },
          "18": {
            "name": "reset_draw_depth",
            "comment": "resets to default from EntityDB"
          },
          "19": {
            "name": "friction",
            "return": "float",
            "comment": "Friction of this entity, affects it's contact with other entities (how fast it slows down on the floor, how fast it can move but also the other way around for floors/activefloors: how other entities can move on it)"
          },
          "20": {
            "name": "set_as_sound_source",
            "params": "SoundMeta*"
          },
          "21": {
            "name": "remove_item",
            "params": "Entity* entity, bool autokill_check",
            "comment": "if autokill_check is true, it will check if the entity has the 'kill if overlay lost' flag and kill it if it's set"
          },
          "22": {
            "name": "get_held_entity",
            "return": "Entity*"
          },
          "23": {
            "name": "v23",
            "params": "Entity* logical_trigger, Entity* who_triggered_it",
            "comment": "spawns LASERTRAP_SHOT from LASERTRAP, also some trigger entities use this, seam to be called right after on_collision2, tiggers use self as the first parameter. Called when there is entity overlapping trigger entity, even if they don't move"
          },
          "24": {
            "name": "trigger_action",
            "params": "Entity* user",
            "return": "bool",
            "comment": "also used for throwables, disabling this for bomb make it always spawn an the ground, but you can still pick it up and throw it"
          },
          "25": {
            "name": "activate",
            "params": "Entity* activator",
            "comment": "Activates a button prompt (with the Use door/Buy button), e.g. buy shop item, activate drill, read sign, interact in camp ..."
          },
          "26": {
            "name": "on_collision2",
            "params": "Entity* other_entity",
            "comment": "More like on_overlap, triggers when entities touch/overlap each other. Triggers for entities in it's EntityDB.collision2_mask"
          },
          "27": {
            "name": "get_metadata",
            "return": "uint16_t",
            "comment": "e.g. for turkey: stores health, poison/curse state, for mattock: remaining swings (returned value is transferred)"
          },
          "28": {
            "name": "apply_metadata",
            "params": "uint16_t metadata"
          },
          "29": {
            "name": "on_walked_on_by",
            "params": "Entity* walker",
            "comment": "hits when monster/player walks on a floor, does something when walker.velocityy<-0.21 (falling onto) and walker.hitboxy * hitboxx > 0.09"
          },
          "30": {
            "name": "on_walked_off_by",
            "params": "Entity* walker",
            "comment": "hits when monster/player walks off a floor, it checks whether the walker has floor as overlay, and if so, removes walker from floor's items by calling remove_item"
          },
          "31": {
            "name": "on_ledge_grab",
            "params": "Entity* who",
            "comment": "only ACTIVEFLOOR_FALLING_PLATFORM, does something with game manager"
          },
          "32": {
            "name": "on_stood_on_by",
            "params": "Entity* entity, Vec2*",
            "comment": "e.g. pots, skulls, pushblocks, ... standing on floors. The Vec2 is just a guess, it only compares Y with 0.1f"
          },
          "33": {
            "name": "toggle_backlayer_illumination",
            "comment": "only for CHAR_*, when going to the backlayer, turns on player emitted light"
          },
          "34": {
            "name": "v34",
            "comment": "only ITEM_TORCH, calls Torch.light_up(false), can't get it to trigger"
          },
          "35": {
            "name": "liberate_from_shop",
            "params": "bool clear_parent",
            "comment": "can also be seen as event: when you anger the shopkeeper, this function gets called for each item; `clear_parent` used only for CHAR_* entities, sets the `linked_companion_parent` to -1. It's not called when item is bought"
          },
          "36": {
            "name": "apply_db",
            "comment": "This is actually just an initialize call that is happening once after  the entity is created"
          }
        }
      },
      { "field": "type", "type": "EntityDBPointer" },
      { "field": "overlay", "type": "EntityPointer" },
      { "field": "items", "type": "EntityList" },
      {
        "field": "flags",
        "type": "Flags32",
        "ref": "entity_flags"
      },
      {
        "field": "more_flags",
        "type": "Flags32",
        "ref": "entity_more_flags"
      },
      { "field": "uid", "type": "EntityUID" },
      { "field": "animation_frame", "type": "UnsignedWord" },
      { "field": "draw_depth", "type": "UnsignedByte" },
      {
        "field": "b3f",
        "type": "Byte",
        "comment": "depth related, changed when going thru doors etc."
      },
      { "field": "x", "type": "Float" },
      { "field": "y", "type": "Float" },
      {
        "field": "abs_x",
        "type": "Float",
        "comment": "abs - only for movable entities, or entities that can be spawned without overlay, for the rest it's FLOAT_MIN?"
      },
      { "field": "abs_y", "type": "Float" },
      { "field": "w", "type": "Float" },
      { "field": "h", "type": "Float" },
      { "field": "special_offsetx", "type": "Float" },
      { "field": "special_offsety", "type": "Float" },
      { "field": "color", "type": "Color" },
      { "field": "collision", "type": "CollisionInfo" },
      { "field": "angle", "type": "Float" },
      { "field": "rendering_info", "type": "RenderInfoPointer" },
      { "field": "texture", "type": "TextureDBPointer" },
      { "field": "tilew", "type": "Float" },
      { "field": "tileh", "type": "Float" },
      { "field": "layer", "type": "UnsignedByte" },
      {
        "field": "b99",
        "type": "UnsignedByte",
        "comment": "this looks like FLOORSTYLED post-processing"
      },
      { "field": "b9a", "type": "UnsignedByte" },
      { "field": "b9b", "type": "UnsignedByte" },
      { "field": "i9c", "type": "UnsignedDword" }
    ],
    "Movable": [
      {
        "vftablefunctions": {
          "37": {
            "name": "can_jump",
            "params": "bool"
          },
          "38": {
            "name": "get_collision_info",
            "params": "CollisionInfo* dest",
            "comment": "from entityDB"
          },
          "39": {
            "name": "sprint_factor",
            "return": "float",
            "comment": "from entityDB"
          },
          "40": {
            "name": "calculate_jump_height",
            "params": "bool dont_ignore_liquid",
            "return": "float"
          },
          "41": {
            "name": "get_animation_map",
            "return": "std::unordered_map<uint8_t, Animation>&",
            "comment": "for Ear animation map RVA 0x22E08AD0"
          },
          "42": {
            "name": "apply_velocity",
            "params": "Vec2& velocities, bool ignore_weight",
            "comment": "Mostly used for ragdoll by the game"
          },
          "43": {
            "name": "get_damage",
            "return": "int8_t",
            "comment": "for player it calculates stomp damages as that's the only damage that the player entity can deal, the 'normal' damage is done by the whip"
          },
          "44": {
            "name": "get_stomp_damage?",
            "return": "int8_t",
            "comment": "calls get_damage except for mech which always returns 3, dunno what's the difference between this and get_damage"
          },
          "45": { "name": "is_on_fire", "return": "bool" },
          "46": {
            "name": "attack",
            "params": "Entity* victim",
            "return": "bool",
            "comment": "Runs on contact damage, returns false if there wasn't any interaction (called from on_collision2, will be called as long as the hitboxes overlap)"
          },
          "47": {
            "name": "thrown_into",
            "params": "Entity* victim",
            "return": "bool",
            "comment": "Same as above, but for being thrown into something and potentially dealing damage that way"
          },
          "48": {
            "name": "damage",
            "params": "Entity* damage_dealer, int8_t damage_amount, DAMAGE_TYPE damage_flags, Vec2* velocity, uint8_t unknown_damage_phase, uint16_t stun_amount, uint8_t iframes, bool unknown_is_final",
            "return": "bool",
            "comment": "Returns: true if entity was affected (for stuff like pot that should break after hit etc.), false if the event should be ignored by damage_dealer"
          },
          "49": {
            "name": "on_hit",
            "params": "Entity* damage_dealer",
            "comment": "triggers for broken arrow hit, calls handle_regular_damage with 0 damage"
          },
          "50": {
            "name": "get_damage_sound",
            "params": "uint16_t damage_type",
            "return": "int32_t",
            "comment": "returns sound id for the damage taken, return 0 to make it silence"
          },
          "51": {
            "name": "stun",
            "params": "uint16_t framecount"
          },
          "52": {
            "name": "freeze",
            "params": "uint8_t framecount, bool ignore_lava",
            "comment": "Sets the `frozen_timer`, the param `ignore_lava` doesn't do much, just skips the liquid check, if in lava the game will set `frozen_timer` to 0 immediately most of the time"
          },
          "53": {
            "name": "light_on_fire",
            "params": "uint8_t time",
            "comment": "Does not damage entity"
          },
          "54": {
            "name": "set_cursed",
            "params": "bool b, bool effect"
          },
          "55": {
            "name": "on_spiderweb_collision",
            "params": "bool unknown",
            "comment": "the bool sets pause statemachine flag? needs testing"
          },
          "56": {
            "name": "set_last_owner_uid",
            "params": "Entity* owner",
            "comment": "assigns player as last_owner_uid and also manipulates movable.b127"
          },
          "57": {
            "name": "get_last_owner_uid",
            "return": "uint32_t",
            "comment": "for players, it checks !stunned && !frozen && !cursed && !has_overlay; for others: just returns last_owner_uid"
          },
          "58": {
            "name": "check_out_of_bounds",
            "comment": "kills with the 'still falling' death cause, is called for any item/fx/mount/monster/player"
          },
          "59": {
            "name": "set_standing_on",
            "params": "int32_t entity_uid"
          },
          "60": {
            "name": "standing_on",
            "return": "Entity*"
          },
          "61": {
            "name": "on_stomped_on_by",
            "params": "Entity* stomper",
            "return": "bool"
          },
          "62": {
            "name": "on_thrown_by",
            "params": "Entity* thrower",
            "return": "",
            "comment": "implemented for special cases like hired hand (player with ai_func), horned lizard..."
          },
          "63": {
            "name": "copy_extra_info",
            "params": "Entity* clone, int32_t some_entity_uid",
            "comment": "some_entity_uid - only used for CHAR_ entities, related to hired hand chain"
          },
          "64": {
            "name": "get_type_id",
            "return": "uint32_t",
            "comment": "dunno what for, implemented solely that ITEM_EXCALIBUR can return ITEM_BROKENEXCALIBUR instead"
          },
          "65": {
            "name": "doesnt_have_spikeshoes",
            "return": "bool",
            "comment": "potentially wrong name. For most entities checks if they are dead, frozen or stun (and apparently returns false if they are), for Yeti queen checks something in the animation_func, returns true for all the items etc. only for CHAR_ entities checks the spike shoes"
          },
          "66": {
            "name": "is_player_mount_or_monster",
            "return": "bool",
            "comment": "returns false for MONS_ALIENQUEEN, MONS_FIREFROG and MOUNT_MECH, for the rest checks EntityDB mask with value 7"
          },
          "67": {
            "name": "pick_up",
            "params": "Entity* entity_to_pick_up"
          },
          "68": {
            "name": "can_be_picked_up_by",
            "params": "Entity* entity_picking_up, bool",
            "return": "bool",
            "comment": "the bool has something to do with the entity being attached to some entity already"
          },
          "69": {
            "name": "drop",
            "comment": "Called when dropping or throwing"
          },
          "70": {
            "name": "collect_treasure",
            "params": "int32_t value, ENT_TYPE treasure",
            "return": "bool",
            "comment": "Adds or subtracts the specified amount of money to the movable's (player's) inventory. Shows the calculation animation in the HUD. Adds treasure to the inventory list shown on transition"
          },
          "71": {
            "name": "apply_movement",
            "params": "uint8_t, uint8_t, uint8_t",
            "return": "bool",
            "comment": "disable this function and things can't move, some spin in place"
          },
          "72": {
            "name": "damage_entity",
            "params": "Entity* victim",
            "comment": "implemented for responsibility and journal update"
          },
          "73": {
            "name": "v73",
            "return": "bool",
            "comment": "checks some flags, held entity, is in liquid, floor entities around?, standing_on, does the current theme has the loop"
          },
          "74": {
            "name": "is_powerup_capable",
            "return": "bool"
          },
          "75": {
            "name": "initialize",
            "comment": "e.g. cobra: set random spit_timer; bat: set random stand_counter; emerald: set price"
          },
          "76": {
            "name": "check_is_falling",
            "comment": "sets more_flags.falling by comparing velocityy to 0, sets i120a to FF, clears owner_uid, can call remove_rider on mounts, for player updates the extra y_pos, for bosses clears lock input timer"
          },
          "77": {
            "name": "v77"
          },
          "78": {
            "name": "process_input",
            "comment": "more like: handle_movement"
          },
          "79": {
            "name": "post_collision_damage_related",
            "comment": "used for enemies attacks as well? 3 versions for: eggplant minister, players and the rest"
          },
          "80": {
            "name": "on_picked_up",
            "comment": "plays pickup sound depending on the entity mask/type etc. set stun for pets and mounts etc."
          },
          "81": {
            "name": "on_release",
            "comment": "only for hired hands and lava pots"
          },
          "82": {
            "name": "generate_fall_poof_particles",
            "comment": "entity.velocityy must be < -0.12 to generate a poof, might to other stuff regarding falling/landing"
          },
          "83": {
            "name": "handle_fall_logic",
            "params": "float",
            "comment": "adjusts entity.velocityy when falling"
          },
          "84": {
            "name": "apply_friction",
            "params": "float, bool vertical, float",
            "comment": "applies entity.type.friction to entity.velocityx, the two floats for characters just multiply the friction, could also be returning the value"
          },
          "85": {
            "name": "can_break_block",
            "params": "bool horizontal, Entity* block",
            "return": "bool",
            "comment": "check on collision if the entity should break the block, used for stuff like drill, hundun etc. surprisingly no mattoc"
          },
          "86": {
            "name": "break_block",
            "params": "bool camera_shake, Entity* block",
            "comment": "triggers when tusk is angered"
          },
          "87": {
            "name": "v87",
            "params": "Entity* entity, float, Entity* floor, float, bool",
            "comment": "on_contact_with_ground ? calls on_stood_on_by, on_fall_onto"
          },
          "88": {
            "name": "v88",
            "params": "Entity* entity, float velocity",
            "comment": "on_ragdoll? - for player, triggers only when you throw him into wall/ground/ceiling"
          },
          "89": {
            "name": "v89",
            "params": "void*, void*, bool, bool default_return_flipped",
            "return": "bool",
            "comment": "triggers on item_rubble?, first parameter only tested if it's 0 for punishball, ignored in the rest, second parameter never used (leftover?)"
          },
          "90": {
            "name": "on_crushed_by",
            "params": "Entity*",
            "comment": "e.g. crushed by elevator, punishball, pushblock, crushtrap (not quillback or boulder)"
          },
          "91": {
            "name": "on_fall_onto",
            "params": "uint32_t play_sound_id, Entity* fell_on_entity",
            "return": "SoundMeta*",
            "comment": "plays the sfx at the entity and sets sound parameters"
          },
          "92": {
            "name": "on_body_destruction",
            "comment": "creates some big struct on stack, feeds it to some unknown function"
          }
        }
      },
      {
        "field": "behaviors_map",
        "type": "StdMap",
        "keytype": "UnsignedDword",
        "valuetype": "MovableBehavior",
        "comment": "map of available behaviors for this entity, behavior is just a vtable"
      },
      { "field": "behaviors", "type": "StdSet", "keytype": "MovableBehavior" },
      { "field": "current_behavior", "type": "MovableBehavior" },
      {
        "field": "cutscene_logic",
        "type": "CutsceneBehavior",
        "pointer": true,
        "comment": "seems to be the same structs used in state.logic ? or similar at least"
      },
      { "field": "movex", "type": "Float" },
      { "field": "movey", "type": "Float" },
      { "field": "buttons", "type": "Flags8", "ref": "buttons_entity" },
      {
        "field": "buttons_previous",
        "type": "Flags8",
        "ref": "buttons_entity"
      },
      { "field": "unknown_padding", "type": "Word", "comment": "garbage?" },
      { "field": "stand_counter", "type": "UnsignedDword" },
      {
        "field": "jump_height_multiplier",
        "type": "Float",
        "comment": "entitydb.jump gets multiplied by this value"
      },
      { "field": "price", "type": "Dword" },
      { "field": "owner_uid", "type": "EntityUID" },
      { "field": "last_owner_uid", "type": "EntityUID" },
      { "field": "current_animation", "type": "Animation", "pointer": true },
      { "field": "idle_counter", "type": "UnsignedDword" },
      { "field": "standing_on_uid", "type": "EntityUID" },
      { "field": "velocityx", "type": "Float" },
      { "field": "velocityy", "type": "Float" },
      { "field": "holding_uid", "type": "EntityUID" },
      { "field": "state", "type": "UnsignedByte" },
      { "field": "last_state", "type": "UnsignedByte" },
      { "field": "move_state", "type": "UnsignedByte" },
      { "field": "health", "type": "UnsignedByte" },
      { "field": "stun_timer", "type": "UnsignedWord" },
      { "field": "stun_state", "type": "UnsignedWord" },
      {
        "field": "lock_input_timer",
        "type": "UnsignedWord",
        "comment": "Related to taking damage, also drops you from ladder/rope, can't be set while on the ground unless you're on a mount"
      },
      { "field": "wet_effect_timer", "type": "UnsignedWord" },
      { "field": "poison_tick_timer", "type": "Word" },
      { "field": "onfire_effect_timer", "type": "UnsignedByte" },
      {
        "field": "exit_invincibility_timer",
        "type": "UnsignedByte",
        "comment": "when exiting a door or a pipe, ..."
      },
      {
        "field": "invincibility_frames_timer",
        "type": "UnsignedByte",
        "comment": "blinks the entity"
      },
      { "field": "frozen_timer", "type": "UnsignedByte" },
      {
        "field": "dont_damage_owner_timer",
        "type": "UnsignedByte",
        "comment": "When > 0, will not deal damage to the last_owner_uid, so that throwing an object does not harm yourself."
      },
      { "field": "knockback_invincibility_timer", "type": "UnsignedByte" },
      {
        "field": "reset_owner_timer",
        "type": "UnsignedByte",
        "comment": "timer for resetting owner_uid"
      },
      { "field": "i120b", "type": "UnsignedByte", "comment": "timer" },
      { "field": "throw_damage_immunity_timer", "type": "UnsignedByte" },
      { "field": "i120d", "type": "UnsignedByte" },
      { "field": "b124", "type": "UnsignedByte" },
      { "field": "falling_timer", "type": "UnsignedByte" },
      {
        "field": "exit_gold_invincibility_timer",
        "type": "UnsignedByte",
        "comment": "Player will not pick up gold/gems while overlapping a door entity or at a pipe exit while this is > 0. Usually set when exiting a layer door or pipe."
      },
      { "field": "b127", "type": "UnsignedByte" }
    ],
    "PowerupCapable": [
      {
        "vftablefunctions": {
          "93": {
            "name": "on_blood_collision",
            "return": "bool",
            "comment": "only triggers when entity has kapala"
          },
          "94": {
            "name": "can_clear_last_owner",
            "return": "bool",
            "comment": "called for stunned entities, check bunch of stuff like state, hold entity, standing on entity etc. runs until returned 1,  this is used to clear the last_owner of stunned entity when it is no longed stunned"
          }
        }
      },
      {
        "field": "powerups",
        "type": "StdMap",
        "keytype": "EntityDBID",
        "valuetype": "EntityPointer"
      }
    ],
    "Monster": [
      {
        "vftablefunctions": {
          "95": {
            "name": "increase_killcount",
            "comment": "increases state.kills_npc, is not called for normal monsters but they all have the same function"
          },
          "96": {
            "name": "on_aggro",
            "params": "uint8_t, bool",
            "comment": "updates state.quests in case of npc"
          },
          "97": {
            "name": "unknown_v97",
            "comment": "can't trigger it"
          },
          "98": {
            "name": "on_shop_entered"
          },
          "99": {
            "name": "attack_logic_related",
            "params": "uint8_t, float",
            "comment": [
              "shopkeeper will walk towards you (doesn't work for Yang, even though he has the same virtual)",
              "if disabled some monster will stop moving (like bats, jiangshi) some wont attack (crabman), shopkeeper can still kick you but won't fire hes weapon"
            ]
          },
          "100": {
            "name": "update_target",
            "params": "Entity* ent, float&",
            "return": "bool",
            "comment": "float from the function above, also works as an output?"
          }
        }
      },
      { "field": "chased_target_uid", "type": "EntityUID" },
      { "field": "target_selection_timer", "type": "UnsignedDword" }
    ],
    "Player": [
      { "field": "inventory_ptr", "type": "PlayerInventory", "pointer": true },
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "linked_companion_child", "type": "EntityUID" },
      { "field": "linked_companion_parent", "type": "EntityUID" },
      { "field": "ai_func", "type": "Ai_func" },
      { "field": "input_ptr", "type": "PlayerSlot", "pointer": true },
      { "field": "basecamp_button", "type": "EntityPointer" },
      {
        "field": "special_sound",
        "type": "SoundMeta",
        "comment": "For Lise System walking and looking up sounds"
      },
      { "field": "y_pos?", "type": "Float" },
      {
        "field": "jump_lock_timer",
        "type": "UnsignedByte",
        "comment": "Increases when jump button is held, set to 0 when not held. Set to max value upon a jump. Unless this is at 0, a jump will only occur if the jump button was not held on the previous frame. "
      },
      {
        "field": "coyote_timer",
        "type": "Byte",
        "comment": "can jump while airborne if greater than 0"
      },
      { "field": "hired_hand_name_index", "type": "UnsignedByte" },
      {
        "field": "swim_timer",
        "type": "UnsignedByte",
        "comment": "45 frame delay between jumps when holding jump button in water."
      },
      {
        "field": "timer_since_last_jump",
        "type": "UnsignedByte",
        "comment": "something different happens before or after 6"
      },
      {
        "field": "can_use",
        "type": "Flags8",
        "flags": {
          "1": "is overlaying something or is attached to something or who the hell knows sometimes",
          "2": "changing layer",
          "3": "unknown, stays on when switching on",
          "4": "unknown, stays on when switching on",
          "5": "unknown, stays on when switching on",
          "6": "unknown, stays on when switching on",
          "7": "unknown, stays on when switching on",
          "8": "unknown, stays on when switching on"
        },
        "comment": "is compared with bit numbers, so probably flags"
      }
    ],
    "Arrowtrap": [
      {
        "vftablefunctions": {
          "40": {
            "name": "spawn_arrow",
            "params": "float x, float y",
            "return": "Entity*",
            "comment": "nothing fancy, all the flags and velocities are done by the logical trigger i believe"
          }
        }
      },
      { "field": "arrow_shot", "type": "Bool" }
    ],
    "Container": [{ "field": "inside", "type": "EntityDBID" }],
    "Gun": [
      { "field": "cooldown", "type": "UnsignedByte" },
      {
        "field": "shots",
        "type": "UnsignedByte",
        "comment": "used only for webgun"
      },
      {
        "field": "shots2",
        "type": "UnsignedByte",
        "comment": "used only for clonegun"
      },
      { "field": "unused", "type": "UnsignedByte" },
      {
        "field": "in_chamber",
        "type": "EntityUID",
        "comment": "only for webgun"
      }
    ],
    "CrushTrap": [
      { "field": "dirx", "type": "Float" },
      { "field": "diry", "type": "Float" },
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "counts from 30 to 0 when detecting player, then moves, when stops moving counts from 60 to 0 before it can be triggered again"
      },
      {
        "field": "bounce_back_timer",
        "type": "UnsignedByte",
        "comment": "counts from 7 to 0 when it hits the wall and moves away from the wall, then moves back and count's from 255 until it hits the wall again, if needed it will start the counter again for another bounce"
      }
    ],
    "Altar": [
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "counts from 0 to 20 then 0, then 1 then 0 and sacrifice happens"
      },
      {
        "field": "unknown",
        "type": "Bool",
        "comment": "goes true/false when body is landing on it, when it stops moving it increments timer on true"
      }
    ],
    "Mattock": [{ "field": "remaining", "type": "UnsignedByte" }],
    "Backpack": [
      { "vftablefunctions": { "99": { "name": "trigger_explosion" } } },
      { "field": "explosion_trigger", "type": "Bool" },
      {
        "field": "explosion_timer",
        "type": "UnsignedByte",
        "comment": "counts from 0 to 30"
      },
      { "field": "unused1", "type": "UnsignedWord" },
      { "field": "unused2", "type": "UnsignedDword" }
    ],
    "Jetpack": [
      {
        "vftablefunctions": {
          "100": { "name": "acceleration", "return": "float" }
        }
      },
      {
        "field": "flame_on",
        "type": "Bool",
        "comment": "Can be used as is_on"
      },
      { "field": "unused1", "type": "UnsignedByte" },
      { "field": "unused2", "type": "UnsignedWord" },
      {
        "field": "fly_counter",
        "type": "UnsignedDword",
        "comment": "it's per level, not per jetpack, it also adds at when it explodes"
      },
      { "field": "fuel", "type": "UnsignedWord" }
    ],
    "TeleporterBackpack": [
      {
        "field": "teleport_number",
        "type": "UnsignedWord"
      }
    ],
    "Hoverpack": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "is_on", "type": "Bool" }
    ],
    "Bomb": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "scale_hor",
        "type": "Float",
        "comment": "1.25 = default regular bomb ; 1.875 = default giant bomb ; > 1.25 generates ENT_TYPE_FX_POWEREDEXPLOSION"
      },
      { "field": "scale_ver", "type": "Float" },
      {
        "field": "is_big_bomb",
        "type": "Bool",
        "comment": "is bomb from powerpack"
      }
    ],
    "Olmec": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "target_uid", "type": "EntityUID" },
      { "field": "attack_phase", "type": "UnsignedByte" },
      { "field": "attack_timer", "type": "UnsignedByte" },
      { "field": "ai_timer", "type": "UnsignedByte" },
      { "field": "move_direction", "type": "Byte" },
      { "field": "jump_timer", "type": "UnsignedByte" },
      { "field": "phase1_amount_of_bomb_salvos", "type": "UnsignedByte" },
      {
        "field": "attack_flags",
        "type": "Flags8",
        "flags": {
          "1": "Hasn't Stomped (Phase 2, set when spawning UFOs, cleared when stomping first time)",
          "2": "Has Broken Layer (Phase 1, cleared when floaters broken, set when breaking the first layer)",
          "3": "",
          "4": "",
          "5": "",
          "6": "",
          "7": "",
          "8": ""
        }
      }
    ],
    "OlmecFloater": [
      { "field": "both_floaters_intact", "type": "Bool" },
      { "field": "on_breaking", "type": "Bool" }
    ],
    "Cape": [
      {
        "vftablefunctions": {
          "100": {
            "name": "100",
            "params": "",
            "return": ""
          }
        }
      },
      { "field": "floating_down", "type": "Bool" },
      { "field": "unused1", "type": "UnsignedByte" },
      { "field": "unused2", "type": "UnsignedWord" },
      {
        "field": "floating_count",
        "type": "UnsignedDword",
        "comment": "it's per level, not per cape"
      }
    ],
    "YellowCape": [{ "field": "sound", "type": "SoundMeta" }],
    "VladsCape": [{ "field": "can_double_jump", "type": "Bool" }],
    "KapalaPowerup": [{ "field": "amount_of_blood", "type": "UnsignedByte" }],
    "Ghost": [
      {
        "field": "split_timer",
        "type": "UnsignedWord",
        "comment": "for SMALL_HAPPY this is also the sequence timer of its various states"
      },
      { "field": "wobble_timer", "type": "UnsignedByte" },
      { "field": "unknown2", "type": "UnsignedByte" },
      { "field": "velocity_multiplier", "type": "Float" },
      {
        "field": "pace_timer",
        "type": "UnsignedWord",
        "comment": "Controls ghost pacing when all players are dead."
      },
      {
        "field": "ghost_behavior",
        "type": "State8",
        "states": {
          "0": "standard, chasing",
          "1": "SMALL_SURPRISED",
          "2": "SMALL_SAD",
          "3": "SMALL_HAPPY",
          "4": "will move up and down, moving slightly more in one direction"
        },
        "comment": "everything above 4 seems to be the same as 4"
      },
      { "field": "blown_by_player", "type": "Bool" },
      {
        "field": "happy_dancing_clockwise",
        "type": "Bool",
        "comment": "Randomly set at the start of happy's dance phase to determine the dance rotation direction."
      },
      { "field": "unknown8", "type": "UnsignedByte" },
      { "field": "unknown9", "type": "UnsignedByte" },
      { "field": "unknown10", "type": "UnsignedByte" },
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "linked_ghost", "type": "EntityPointer" },
      {
        "field": "target_dist_visibility_factor",
        "type": "Float",
        "comment": "Value from 0.5 to 1, based on the distance to the ghost's target, multiplied by the target_layer_visibility_factor to set the transparency and illumination of the ghost."
      },
      {
        "field": "target_layer_visibility_factor",
        "type": "Float",
        "comment": "Value from 0 to 1, based on how long the ghost has been in the same layer as its target, multiplied by the target_dist_visibility_factor to set the transparency and illumination of the ghost."
      },
      { "field": "sound", "type": "SoundMeta" }
    ],
    "Monkey": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "jump_timer", "type": "UnsignedByte" },
      { "field": "on_vine", "type": "Bool" }
    ],
    "GoldMonkey": [
      { "field": "jump_timer", "type": "UnsignedByte" },
      { "field": "padding", "type": "UnsignedByte" },
      { "field": "poop_timer", "type": "UnsignedWord" },
      { "field": "poop_count", "type": "UnsignedByte" }
    ],
    "Mole": [
      { "field": "burrowing_sound", "type": "SoundMeta" },
      { "field": "nonburrowing_sound", "type": "SoundMeta" },
      { "field": "burrowing_particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "burrow_dir_x", "type": "Float" },
      { "field": "burrow_dir_y", "type": "Float" },
      {
        "field": "burrowing_in_uid",
        "type": "EntityUID",
        "comment": "stores the last uid as well"
      },
      { "field": "counter_burrowing", "type": "UnsignedByte" },
      { "field": "counter_nonburrowing", "type": "UnsignedByte" },
      { "field": "countdown_for_appearing", "type": "UnsignedByte" },
      { "field": "unknown_two_while_burrowed", "type": "UnsignedByte" },
      {
        "field": "state",
        "type": "State8",
        "states": {
          "0": "non_burrowed",
          "2": "burrowed",
          "3": "state_change"
        }
      }
    ],
    "Spider": [
      {
        "vftablefunctions": {
          "101": {
            "name": "spawn_offset_related",
            "comment": "disabling this function makes the spider spawn in weird position"
          },
          "102": {
            "name": "v_102",
            "return": "float",
            "comment": "for spider returns 0.02, for giant spider 0.025, game does some calculations with this when triggered by player"
          },
          "103": {
            "name": "on_ceiling",
            "return": "bool"
          }
        }
      },
      { "field": "ceiling_pos_x", "type": "Float" },
      { "field": "ceiling_pos_y", "type": "Float" },
      {
        "field": "jump_timer",
        "type": "UnsignedByte",
        "comment": "for the giant spider, some times he shot web instead of jumping"
      },
      { "field": "unused1", "type": "UnsignedByte" },
      { "field": "unused2", "type": "UnsignedWord" },
      {
        "field": "trigger_distance",
        "type": "Float",
        "comment": "only in the x coord"
      }
    ],
    "HangSpider": [
      { "field": "dangle_jump_timer", "type": "Word" },
      { "field": "padding", "type": "UnsignedWord" },
      { "field": "ceiling_pos_x", "type": "Float" },
      { "field": "ceiling_pos_y", "type": "Float" }
    ],
    "RoomOwner": [
      {
        "vftablefunctions": {
          "101": {
            "name": "on_criminal_act_committed",
            "params": "uint8_t reason",
            "comment": "shows the appropriate message (vandal, cheater, ...)"
          },
          "102": {
            "name": "should_attack_on_sight",
            "return": "bool",
            "comment": [
              "for shopkeepers: checks state.shoppie_aggro_levels, for waddler checks the state.quest_flags",
              "if you return false, but you have attacked them before, they will be patrolling but won't attack you on sight",
              "Tusk and Yang always return false (Yang won't show anymore if attacked before, Tusk is aggroed from the start on 6-3 when you attacked her in tidepool)"
            ]
          },
          "103": {
            "name": "is_angry_flag_set",
            "return": "bool",
            "comment": "checks state.level_flags 10-16 depending on the monster"
          },
          "104": {
            "name": "set_initial_attack_delay",
            "comment": "only for shopkeeper: sets shopkeeper.shotgun_attack_delay to 6, triggers only at the start when aggroed"
          },
          "105": {
            "name": "spawn_weapon",
            "return": "Entity*",
            "comment": "return the weapon entity that will be used to attack the player"
          },
          "106": {
            "name": "weapon_type",
            "return": "ENT_TYPE",
            "comment": "the entity type of the weapon that will be spawned to attack the player"
          },
          "107": {
            "name": "should_attack",
            "params": "std::tuple<Entity*, float, float, float> target",
            "return": "bool",
            "comment": "parameter is some struct that contains the target"
          },
          "108": {
            "name": "unknown_v108",
            "comment": "for shopkeepers, it loops over (some of) the items for sale"
          },
          "109": {
            "name": "on_death_treasure_drop",
            "comment": "coins and if you're lucky, gold bar from shopkeeper"
          }
        }
      },
      { "field": "room_index", "type": "UnsignedDword" },
      {
        "field": "climb_y_direction",
        "type": "Float",
        "comment": "when on a rope or ladder"
      },
      { "field": "ai_state", "type": "UnsignedByte" },
      { "field": "patrol_timer", "type": "UnsignedByte" },
      {
        "field": "lose_interest_timer",
        "type": "UnsignedByte",
        "comment": "delay in-between attacks"
      },
      { "field": "unknown_timer1", "type": "UnsignedByte" },
      {
        "field": "countdown_timer",
        "type": "UnsignedWord",
        "comment": "counts down to 0 when a value is forced, can't shot when the timer is running"
      },
      { "field": "unknown1", "type": "UnsignedByte" },
      {
        "field": "is_patrolling",
        "type": "Bool",
        "comment": "used to make shopkeeper walk, for other can sometimes be used as is_active"
      },
      {
        "field": "aggro",
        "type": "Bool",
        "comment": "setting this makes him angry, if it's shopkeeper you get 2 agrro points"
      },
      {
        "field": "was_hurt",
        "type": "Bool",
        "comment": "also is set true if you set aggro to true, gets trigger even when whipping"
      },
      { "field": "padding1", "type": "UnsignedByte" },
      { "field": "padding2", "type": "UnsignedByte" },
      { "field": "padding3", "type": "Dword" }
    ],
    "Shopkeeper": [
      {
        "field": "name",
        "type": "State8",
        "states": {
          "0": "Ali",
          "1": "Bob",
          "2": "Cosmo",
          "3": "Darwin",
          "4": "Ear",
          "5": "Earl",
          "6": "Frank",
          "7": "Garth",
          "8": "Hakim",
          "9": "Iggy",
          "10": "Ivan",
          "11": "Jimbo",
          "12": "Kinni",
          "13": "Lou",
          "14": "Micky",
          "15": "Nacho",
          "16": "Omar",
          "17": "Pancho",
          "18": "Quincy",
          "19": "Ron",
          "20": "Sparky",
          "21": "Tarn",
          "22": "Ulf",
          "23": "Vern",
          "24": "Wang",
          "25": "Willy",
          "26": "Xander",
          "27": "Yoshi",
          "28": "Ziggy"
          //29 - "No"
          //30 - 31 - game crash
          //32 - 36 - "Yes"
          //37 - 43 - game crash
          //not gonna check futher, if someone want's to, go on
        },
        "comment": "anything above 28 is just random string, can crash the game"
      },
      {
        "field": "shotgun_attack_delay",
        "type": "UnsignedByte",
        "comment": "can't shot when the timer is running"
      },
      {
        "field": "have_key",
        "type": "Bool",
        "comment": "will drop key after stun/kill"
      },
      {
        "field": "shop_owner",
        "type": "Bool"
      },
      {
        "field": "is_ear",
        "type": "Bool",
        "comment": "sometimes set to true"
      },
      { "field": "padding1", "type": "UnsignedByte" },
      { "field": "padding2", "type": "UnsignedByte" },
      { "field": "padding3", "type": "UnsignedByte" }
    ],
    "Ghist": [
      {
        "vftablefunctions": {
          "101": {
            "name": "on_body_destroyed",
            "comment": "clears level_flags [Angry ghist shopkeeper] and other stuff, then calls ->destroy()"
          }
        }
      },
      { "field": "body_uid", "type": "EntityUID" },
      {
        "field": "idle_timer",
        "type": "UnsignedByte",
        "comment": "will not chase after you while the timer is running"
      },
      { "field": "padding1", "type": "UnsignedByte" },
      { "field": "padding2", "type": "UnsignedWord" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "movement_related_timer_1", "type": "UnsignedByte" },
      { "field": "movement_related_timer_2", "type": "UnsignedByte" },
      { "field": "transparency", "type": "UnsignedByte" },
      { "field": "padding3", "type": "UnsignedByte" },
      {
        "field": "fadeout",
        "type": "UnsignedWord",
        "comment": "when 0, ghist fades out/dies"
      }
    ],
    "Yang": [
      { "field": "turkeys_in_den", "type": "StdSet", "keytype": "EntityUID" },
      { "field": "unknown4", "type": "UnsignedByte" },
      { "field": "unknown5", "type": "UnsignedByte" },
      {
        "field": "first_message_shown",
        "type": "Bool",
        "comment": "I'm looking for turkeys, wanna help?"
      },
      {
        "field": "quest_incomplete",
        "type": "Bool",
        "comment": "gets set to false when the quest is over (Yang dead or second turkey delivered)"
      },
      {
        "field": "special_message_shown",
        "type": "Bool",
        "comment": "tusk palace, black market or one way door message shown"
      },
      { "field": "padding4", "type": "UnsignedByte" },
      { "field": "padding5", "type": "UnsignedByte" },
      { "field": "padding6", "type": "UnsignedByte" }
    ],
    "Pet": [
      { "field": "fx_button", "type": "EntityPointer" },
      { "field": "petting_by_uid", "type": "EntityUID" },
      {
        "field": "yell_counter",
        "type": "Word",
        "comment": "counts up to 400 (6.6 sec); when 0 the pet yells out"
      },
      { "field": "sit_timer", "type": "UnsignedWord", "comment": "when colliding with a player in the camp" },
      { "field": "sit_cooldown_timer", "type": "UnsignedWord", "comment": "when colliding with a player in the camp" },
      {
        "field": "func_timer",
        "type": "Word",
        "comment": "used when free running in the camp"
      },
      {
        "field": "active_state",
        "type": "Byte",
        "comment": "-1 = sitting and yelling; 0 = either running, dead or picked up"
      },
      {
        "field": "petted_counter",
        "type": "UnsignedByte",
        "comment": "number of times petted in the camp"
      }
    ],
    "WalkingMonster": [
      {
        "vftablefunctions": {
          "101": {
            "name": "can_aggro",
            "return": "bool",
            "comment": "Aggro or calm, if forced to return 0 it will not aggro unless you overlap his hitbox. For caveman this is called when he wakes up (from sleep or stun)"
          },
          "102": {
            "name": "v_102",
            "params": "Entity*",
            "return": "Entity*",
            "comment": "returns the same entity as provided in the parameter"
          }
        }
      },
      { "field": "chatting_to_uid", "type": "EntityUID" },
      {
        "field": "walk_pause_timer",
        "type": "Word",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      {
        "field": "cooldown_timer",
        "type": "Word",
        "comment": "used for chatting with other monsters, attack cool downs etc."
      }
    ],
    "Caveman": [
      { "field": "wake_up_timer", "type": "UnsignedByte" },
      {
        "field": "can_pick_up_timer",
        "type": "UnsignedByte",
        "comment": "0 = can pick something up; when holding forced to 179; after tripping and regaining consciousness counts down to 0"
      },
      {
        "field": "unknown_aggro_timer",
        "type": "Word",
        "comment": "1 sec timer at the start of getting aggro"
      },
      {
        "field": "aggro_timer",
        "type": "Word",
        "comment": "keeps resetting when angry and a player is nearby"
      }
    ],
    "Mosquito": [
      { "field": "direction_x", "type": "Float" },
      { "field": "direction_y", "type": "Float" },
      {
        "field": "stuck_rel_pos_x",
        "type": "Float",
        "comment": "position relative to the block the mosquito is stuck in"
      },
      { "field": "stuck_rel_pos_y", "type": "Float" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "timer", "type": "UnsignedDword" }
    ],
    "Mantrap": [
      {
        "field": "walk_pause_timer",
        "type": "Dword",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      {
        "field": "eaten_uid",
        "type": "EntityUID",
        "comment": "the uid of the entity the mantrap has eaten, in case it can break out, like a shopkeeper"
      }
    ],
    "Skeleton": [
      {
        "field": "explosion_timer",
        "type": "Word",
        "comment": "-1 never explodes"
      }
    ],
    "Scarab": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "emitted_light",
        "type": "IlluminationPointer",
        "comment": "set color in sat_vign_0, be sure to make the aperture large enough"
      },
      {
        "field": "timer",
        "type": "UnsignedWord",
        "comment": "how long to stay in that position"
      }
    ],
    "Tun": [
      { "field": "arrows_left", "type": "UnsignedByte" },
      {
        "field": "reload_timer",
        "type": "UnsignedByte",
        "comment": "when 0, a new arrow is loaded into the bow; resets when she finds an arrow on the ground"
      },
      {
        "field": "challenge_fee_paid",
        "type": "Bool",
        "comment": "affect only the speech bubble"
      },
      {
        "field": "congrats_challenge",
        "type": "Bool",
        "comment": "congrats message shown after exiting a challenge"
      },
      {
        "field": "murdered",
        "type": "Bool",
        "comment": "when she disappears in a cloud of smoke"
      },
      { "field": "shop_entered", "type": "Bool" },
      {
        "field": "tiamat_encounter",
        "type": "Bool",
        "comment": "if set to false, greets you with 'you've done well to reach this place'"
      },
      { "field": "padding", "type": "UnsignedByte" }
    ],
    "Imp": [
      { "field": "carrying_uid", "type": "EntityUID" },
      { "field": "patrol_y_level", "type": "Float" }
    ],
    "Lavamander": [
      { "field": "emitted_light", "type": "IlluminationPointer" },
      {
        "field": "shoot_lava_timer",
        "type": "UnsignedByte",
        "comment": "when this timer reaches zero, it appears on the surface/shoots lava; triggers on player proximity"
      },
      { "field": "padding1", "type": "UnsignedByte" },
      {
        "field": "jump_pause_timer",
        "type": "UnsignedWord",
        "comment": "jump pause when cool; runs continuously when hot"
      },
      { "field": "lava_detection_timer?", "type": "UnsignedByte" },
      { "field": "is_hot", "type": "Bool" },
      {
        "field": "player_detect_state",
        "type": "State8",
        "states": {
          "0": "didnt_saw_player",
          "1": "saw_player",
          "2": "spited_lava"
        },
        "comment": "used so he won't spit imminently after seeing the player"
      },
      { "field": "padding2", "type": "UnsignedByte" }
    ],
    "Firebug": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "fire_timer",
        "type": "UnsignedWord",
        "comment": "when it reaches zero, it shoots fire"
      },
      { "field": "going_up", "type": "Bool" },
      { "field": "detached_from_chain", "type": "Bool" }
    ],
    "FirebugUnchained": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "max_flight_height",
        "type": "Float",
        "comment": "increments when flying up, until it reaches 1.0, then bug flies down"
      },
      {
        "field": "ai_timer",
        "type": "UnsignedDword",
        "comment": "when reaches zero, decides whether to walk or fly or pause; doesn't reset when flying"
      },
      {
        "field": "walking_timer",
        "type": "UnsignedDword",
        "comment": "counts down only when walking; can't start flying unless this is at zero"
      }
    ],
    "Robot": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "emitted_light_explosion", "type": "IlluminationPointer" },
	  {
        "field": "prev_move_state",
        "type": "UnsignedByte",
        "comment": "Used to return to the correct state when landing after falling and running into a wall when activated."
      }
    ],
    "Quillback": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "particle", "type": "ParticleEmitterInfoPointer" },
      {
        "field": "broke_block",
        "type": "Bool",
        "comment": "Set to true in break_block, then set back to false in apply_movement after running some logic (eg, playing a sound)."
      },
      {
        "field": "post_hit_wall_direction",
        "type": "Byte",
        "comment": "Set in can_break_block during apply_movement to 1 when colliding with an indesctructible wall to the left, -1 if to the right, 0 if no collision. Used later in apply_movement to change Quillback's facing direction."
      },
      { "field": "unknown_timer", "type": "UnsignedByte" },
      { "field": "seen_player", "type": "Bool" }
    ],
    "HornedLizard": [
      { "field": "eaten_uid", "type": "EntityUID" },
      {
        "field": "walk_pause_timer",
        "type": "UnsignedByte",
        "comment": "alternates between walking and pausing when timer reaches zero"
      },
      {
        "field": "attack_cooldown_timer",
        "type": "UnsignedByte",
        "comment": "won't attack until timer reaches zero"
      },
      { "field": "blood_squirt_timer", "type": "UnsignedByte" },
      { "field": "unknown3", "type": "UnsignedByte" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "particle", "type": "ParticleEmitterInfoPointer" }
    ],
    "Leprechaun": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "hump_timer", "type": "UnsignedByte" },
      { "field": "target_in_sight_timer", "type": "UnsignedByte" },
      {
        "field": "gold",
        "type": "UnsignedWord",
        "comment": "amount of gold he picked up, will be dropped on death"
      },
      { "field": "timer_after_humping", "type": "UnsignedByte" },
      { "field": "jump_trigger", "type": "Bool", "comment": "triggers a jump on the next frame" },
      { "field": "padding", "type": "UnsignedWord" },
      {
        "field": "collected_treasure",
        "type": "StdVector",
        "valuetype": "EntityDBID"
      }
    ],
    "Crocman": [{ "field": "teleport_cooldown", "type": "UnsignedByte" }],
    "Mummy": [
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing when timer reaches zero"
      }
    ],
    "WitchDoctor": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "skull_regen_timer",
        "type": "UnsignedWord",
        "comment": "when zero, regenerates a new floating skull"
      }
    ],
    "WitchDoctorSkull": [
      { "field": "witch_doctor_uid", "type": "EntityUID" },
      { "field": "unknown1", "type": "UnsignedDword" },
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "rotation_angle", "type": "Float" }
    ],
    "NPC": [
      {
        "vftablefunctions": {
          "101": {
            "name": "on_criminal_act_committed",
            "comment": "RoomOwner and NPC may have common subclass for the first two virtuals, but they later diverge, weapon type is the same spot, but they probably just made one first then copied over the virtuals"
          },
          "102": {
            "name": "should_attack_on_sight",
            "return": "bool"
          },
          "103": {
            "name": "v_103",
            "params": "Vec2&",
            "return": "Vec2&",
            "comment": "only accessed when not angered"
          },
          "104": {
            "name": "on_interaction",
            "params": "bool, bool",
            "comment": "does the quests stuff etc."
          },
          "105": {
            "name": "spawn_weapon",
            "return": "Entity*"
          },
          "106": {
            "name": "weapon_type",
            "return": "ENT_TYPE"
          },
          "107": {
            "name": "should_attack",
            "params": "std::tuple<Entity*, float, float, float> target",
            "return": "bool"
          },
          "108": {
            "name": "on_criminal_act_committed2",
            "params": "void*",
            "comment": "calls the on_criminal_act_committed except for bodyguard which calls the should_attack_on_sight and turns off any speech-bubble"
          }
        }
      },
      { "field": "climb_direction", "type": "Float" },
      { "field": "unknown1", "type": "UnsignedByte" },
      { "field": "unknown2", "type": "UnsignedByte" },
      { "field": "unknown_timer", "type": "UnsignedByte" },
      { "field": "target_in_sight_timer", "type": "UnsignedByte" },
      { "field": "ai_state", "type": "UnsignedByte" },
      {
        "field": "aggro",
        "type": "Bool",
        "comment": "for bodyguard and shopkeeperclone it spawn a weapon as well"
      },
      { "field": "padding1", "type": "UnsignedByte" },
      { "field": "padding2", "type": "UnsignedByte" },
      { "field": "padding3", "type": "UnsignedDword" }
    ],
    "VanHorsing": [
      {
        "field": "show_text",
        "type": "Bool",
        "comment": "if set to true, he will say 'I've been hunting this fiend a long time!' when on screen"
      },
      {
        "field": "special_message_shown",
        "type": "Bool",
        "comment": "one way door message has been shown"
      }
    ],
    "ForestSister": [
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing when timer reaches zero"
      }
    ],
    "CavemanShopkeeper": [
      { "field": "unknown3", "type": "UnsignedByte" },
      { "field": "timer3", "type": "UnsignedByte" },
      { "field": "timer4", "type": "UnsignedByte" },
      { "field": "tripping", "type": "Bool" },
      { "field": "timer5", "type": "Word" },
      { "field": "padding", "type": "Word" },
      { "field": "shop_entered", "type": "Bool" }
    ],
    "Vampire": [
      {
        "field": "jump_trigger_distance_x",
        "type": "Float",
        "comment": "the distance from the player it starts jumping"
      },
      { "field": "jump_trigger_distance_y", "type": "Float" },
      { "field": "sleep_pos_x", "type": "Float" },
      { "field": "sleep_pos_y", "type": "Float" },
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing when timer reaches zero"
      },
      { "field": "padding", "type": "Dword" }
    ],
    "Vlad": [
      {
        "field": "teleport_cooldown",
        "type": "UnsignedByte",
        "comment": "triggers when Vlad teleports, when timer running he can't teleport and will stun when hit"
      },
      { "field": "aggro", "type": "Bool", "comment": "or sleeping" }
    ],
    "Waddler": [
      {
        "field": "player_detected",
        "type": "Bool",
        "comment": "to show the welcome message"
      },
      { "field": "on_the_ground", "type": "Bool" },
      {
        "field": "air_timer",
        "type": "UnsignedByte",
        "comment": "counts while in the air, jumping"
      }
    ],
    "Jiangshi": [
      { "field": "wait_timer", "type": "UnsignedByte" },
      {
        "field": "jump_counter",
        "type": "UnsignedByte",
        "comment": "only female aka assassin, when 0 will jump up into ceiling"
      },
      {
        "field": "on_ceiling",
        "type": "Bool",
        "comment": "only female aka assassin"
      }
    ],
    "Octopus": [
      {
        "field": "unknown1",
        "type": "UnsignedByte",
        "comment": "something to do with state?"
      }
    ],
    "Bodyguard": [
      {
        "field": "position_state",
        "type": "State8",
        "states": {
          "0": "none",
          "1": "Tusk dice shop",
          "2": "Entrance to pleasure palace",
          "3": "Basement entrance to pleasure palace"
        }
      },
      {
        "field": "message_shown",
        "type": "Bool",
        "comment": "entrance and basement entrance"
      }
    ],
    "Fish": [{ "field": "change_direction_timer", "type": "UnsignedDword" }],
    "GiantFish": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "change_direction_timer",
        "type": "UnsignedWord",
        "comment": "when bouncing into a wall, it changes direction too"
      },
      {
        "field": "lose_interest_timer",
        "type": "UnsignedWord",
        "comment": "delay in-between attacks"
      },
      {
        "field": "unknown_timer",
        "type": "UnsignedWord",
        "comment": "at 0 writes random value to unknown2, maybe unknown1 as well?"
      },
      { "field": "padding1", "type": "UnsignedWord" },
      { "field": "unknown1", "type": "Float" },
      {
        "field": "unknown2",
        "type": "Float",
        "comment": "increment value for unknown3?"
      },
      { "field": "unknown3", "type": "Float" }
    ],
    "Crabman": [
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing when timer reaches zero"
      },
      {
        "field": "invincibility_timer",
        "type": "UnsignedByte",
        "comment": "triggers after being attacked"
      },
      { "field": "poison_attack_timer", "type": "UnsignedByte" },
      { "field": "padding4", "type": "UnsignedByte" },
      { "field": "padding5", "type": "UnsignedByte" },
      { "field": "attacking_claw_uid", "type": "EntityUID" },
      { "field": "at_maximum_attack", "type": "Bool" }
    ],
    "Kingu": [
      {
        "field": "sound1",
        "type": "SoundMeta",
        "comment": "initialized when breaking the shell (sliding down sound maybe?)"
      },
      {
        "field": "sound2",
        "type": "SoundMeta",
        "comment": "Turning into stone sound"
      },
      {
        "field": "climb_direction_x",
        "type": "Float",
        "comment": "distance too?"
      },
      { "field": "climb_direction_y", "type": "Float" },
      { "field": "climb_pause_timer", "type": "UnsignedWord" },
      { "field": "shell_invincibility_timer", "type": "UnsignedByte" },
      { "field": "monster_spawn_timer", "type": "UnsignedByte" },
      {
        "field": "initial_shell_health",
        "type": "UnsignedByte",
        "comment": "Excalibur wipes out immediately, bombs take off 11 points; when 0 vulnerable to whip"
      },
      { "field": "player_seen_by_kingu?", "type": "Bool" }
    ],
    "Anubis": [
      {
        "vftablefunctions": {
          "101": {
            "name": "set_next_attack_timer",
            "comment": "sets next_attack_timer based on the psychic_orbs_counter"
          },
          "102": { "name": "normal_attack" },
          "103": { "name": "play_attack_sound" }
        }
      },
      { "field": "spawn_x", "type": "Float" },
      { "field": "spawn_y", "type": "Float" },
      { "field": "unknown1", "type": "Float" },
      {
        "field": "attack_proximity_y",
        "type": "Float",
        "comment": "how close you have to be to be attacked; set both to 0 for a pet Anubis"
      },
      { "field": "attack_proximity_x", "type": "Float" },
      { "field": "ai_timer", "type": "UnsignedByte" },
      { "field": "next_attack_timer", "type": "UnsignedByte" },
      { "field": "psychic_orbs_counter", "type": "UnsignedByte" },
      { "field": "awake", "type": "Bool" }
    ],
    "Cobra": [
      {
        "field": "spit_timer",
        "type": "UnsignedDword",
        "comment": "alternates between counting to 100 and to 64"
      },
      {
        "field": "duplicate_move_state",
        "type": "Dword",
        "comment": "6 is put in movable.move_state as well as in here while spitting poison"
      }
    ],
    "CatMummy": [
      {
        "field": "jump_height_multiplier",
        "type": "UnsignedByte",
        "comment": "Set in process_input when jump is triggered to be used when applying velocity for the jump"
      },
      { "field": "attack_timer", "type": "UnsignedByte" }
    ],
    "Sorceress": [
      { "field": "inbetween_attack_timer", "type": "UnsignedDword" },
      { "field": "airtime", "type": "Float", "comment": "why float?" },
      {
        "field": "halo_emitted_light",
        "type": "IlluminationPointer",
        "comment": "not the shot but the halo, try putting a color at 10"
      },
      { "field": "fx_entity", "type": "EntityPointer" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "hover_timer?", "type": "UnsignedByte" }
    ],
    "MagmaMan": [
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "particle", "type": "ParticleEmitterInfoPointer" },
      {
        "field": "jump_timer",
        "type": "UnsignedDword",
        "comment": "when 0 it jumps"
      },
      {
        "field": "alive_timer",
        "type": "UnsignedDword",
        "comment": "when 0, the magmaman disappears"
      }
    ],
    "Bee": [
      { "field": "can_rest", "type": "Bool" },
      { "field": "padding1", "type": "UnsignedByte" },
      { "field": "padding2", "type": "UnsignedWord" },
      { "field": "padding3", "type": "UnsignedDword" },
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "fly_hang_timer",
        "type": "UnsignedWord",
        "comment": "alternates between hanging/sitting on the wall and flying every time it reaches zero"
      },
      { "field": "wobble_timer", "type": "UnsignedByte" },
      {
        "field": "targeting_timer?",
        "type": "UnsignedByte",
        "comment": "counts when bee takes off and hasn't spotted a target yet"
      },
      {
        "field": "start_walking_time",
        "type": "UnsignedByte",
        "comment": "When the fly_hang_timer gets to this value while in the standing state (move_state 9), the be will start walking."
      },
      {
        "field": "stop_walking_time",
        "type": "UnsignedByte",
        "comment": "When the fly_hang_timer gets to this value while in the standing state (move_state 9), the be will stop walking."
      },
      { "field": "padding4", "type": "UnsignedByte", "comment": "padding?" },
      {
        "field": "padding5",
        "type": "UnsignedByte",
        "comment": "padding? quite a lot of unused memory in this entity, maybe this is more the one type?"
      },
      {
        "field": "wobble_x",
        "type": "Float",
        "comment": "maybe the positional offset to make it look like it's buzzing"
      },
      { "field": "wobble_y", "type": "Float" }
    ],
    "Ammit": [
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      { "field": "padding", "type": "UnsignedDword" },
      { "field": "particle_trail", "type": "ParticleEmitterInfoPointer" }
    ],
    "ApepHead": [
      { "field": "sound1", "type": "SoundMeta" },
      { "field": "sound2", "type": "SoundMeta" },
      { "field": "distance_traveled", "type": "Float" },
      { "field": "tail", "type": "EntityUID" },
      { "field": "fx_mouth_piece1", "type": "EntityUID" },
      { "field": "fx_mouth_piece2", "type": "EntityUID" }
    ],
    "ApepPart": [
      { "field": "y_pos", "type": "Float" },
      { "field": "sine_angle", "type": "Float" },
      {
        "field": "sync_timer",
        "type": "UnsignedByte",
        "comment": "or pause timer, used to sync the body parts moving up and down"
      },
      { "field": "padding1", "type": "Byte" },
      { "field": "padding2", "type": "Word" },
      { "field": "padding3", "type": "Dword" }
    ],
    "OsirisHead": [
      {
        "field": "right_hand_uid",
        "type": "EntityUID",
        "comment": "right from his perspective"
      },
      { "field": "left_hand_uid", "type": "EntityUID" },
      { "field": "moving_left", "type": "Bool" },
      { "field": "oscillation_phase", "type": "UnsignedByte" },
      { "field": "invincibility_timer", "type": "UnsignedByte" }
    ],
    "OsirisHand": [
      { "field": "attack_cooldown_timer", "type": "UnsignedByte" }
    ],
    "Alien": [
      {
        "field": "jump_timer",
        "type": "UnsignedWord",
        "comment": "when 0 it jumps"
      },
      { "field": "shudder_timer", "type": "UnsignedByte" },
      { "field": "leg_shake_timer", "type": "UnsignedByte" }
    ],
    "UFO": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "patrol_distance",
        "type": "Word",
        "comment": "pos = right, neg = left"
      },
      { "field": "attack_cooldown_timer", "type": "UnsignedByte" },
      { "field": "is_rising", "type": "Bool" }
    ],
    "Lahamu": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "eyeball", "type": "EntityPointer" },
      { "field": "attack_cooldown_timer", "type": "UnsignedWord" },
      { "field": "has_logged_to_journal", "type": "Bool" }
    ],
    "YetiQueen": [
      {
        "vftablefunctions": {
          "101": {
            "name": "v_101",
            "comment": "can't trigger"
          },
          "102": {
            "name": "attack_related",
            "params": "float[4]",
            "comment": "parameter is some struct, if disabled it doesn't do jump attack, but still does the protect head thing"
          },
          "103": {
            "name": "v_103",
            "comment": "return"
          },
          "104": {
            "name": "jump_related",
            "comment": "if disabled she squads but never makes the jump"
          },
          "105": {
            "name": "on_death",
            "comment": "spawns the drops"
          }
        }
      },
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      { "field": "unknown_timer", "type": "UnsignedByte" }
    ],
    "YetiKing": [
      {
        "vftablefunctions": {
          "101": {
            "name": "v_101",
            "comment": "can't trigger"
          },
          "102": {
            "name": "attack_related",
            "params": "float[4]",
            "comment": "parameter is some struct, if disabled it doesn't do jump attack, but still does the protect head thing"
          },
          "103": {
            "name": "on_attack",
            "comment": "freezes stuff when attacks and spawns particles"
          },
          "104": {
            "name": "scream_related",
            "comment": "if disabled he opens the mount but never screams"
          },
          "105": {
            "name": "on_death",
            "comment": "spawns the drops"
          }
        }
      },
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      { "field": "unknown_timer", "type": "UnsignedByte" },
      { "field": "unknown1", "type": "UnsignedByte" },
      { "field": "unknown2", "type": "UnsignedWord" },
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "particle_fog", "type": "ParticleEmitterInfoPointer" },
      { "field": "particle_dust", "type": "ParticleEmitterInfoPointer" },
      { "field": "particle_sparkles", "type": "ParticleEmitterInfoPointer" }
    ],
    "Lamassu": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "attack_effect_entity", "type": "EntityPointer" },
      { "field": "particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "emitted_light", "type": "IlluminationPointer" },
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      {
        "field": "flight_timer",
        "type": "UnsignedDword",
        "comment": "when 0 it starts flying; only counts down when it's walking"
      },
      {
        "field": "attack_timer",
        "type": "Dword",
        "comment": "greater than 0 = charging up; 0 = fire ; less than 0 = cooldown"
      },
      { "field": "attack_angle", "type": "Float" },
      {
        "field": "was_flying",
        "type": "Bool",
        "comment": "Lets lamassu know what state to go to after finishing an attack"
      }
    ],
    "Olmite": [
      { "field": "armor_on", "type": "Bool" },
      {
        "field": "in_stack",
        "type": "Bool",
        "comment": "disables the attack, stun, lock's looking left flag between stack"
      },
      {
        "field": "in_stack2",
        "type": "Bool",
        "comment": "is set to false couple frame after being detached from stack"
      },
      { "field": "padding1", "type": "Byte" },
      { "field": "on_top_uid", "type": "EntityUID" },
      {
        "field": "y_offset",
        "type": "Float",
        "comment": "same as y position when stacked"
      },
      {
        "field": "attack_cooldown_timer",
        "type": "UnsignedByte",
        "comment": "jump attacks can start when 0, used also by the bottom one in stack"
      },
      { "field": "unknown_countdown", "type": "UnsignedByte" },
      { "field": "padding2", "type": "UnsignedWord" }
    ],
    "Tiamat": [
      {
        "field": "sound",
        "type": "SoundMeta",
        "comment": "Turning into stone sound"
      },
      { "field": "fx_tiamat_head_uid", "type": "EntityUID" },
      { "field": "fx_tiamat_arm_right1_uid", "type": "EntityUID" },
      { "field": "fx_tiamat_arm_right2_uid", "type": "EntityUID" },
      {
        "field": "invincibility_timer",
        "type": "UnsignedByte"
      },
      { "field": "padding1", "type": "UnsignedByte" },
      {
        "field": "damage_timer",
        "type": "Word",
        "comment": "phase 1: 1 sec frowning (-60 to 0) ; phase 2: 1 sec yelling/repulsing (-60 to 0) ; phase 3: 5 secs of vulnerability (300 to 0)"
      },
      {
        "field": "attack_timer",
        "type": "UnsignedDword",
        "comment": "when 0, she attacks"
      },
      { "field": "unknown2", "type": "Float" },
      { "field": "tail_angle", "type": "Float" },
      {
        "field": "tail_radian",
        "type": "Float",
        "comment": "Counts from 0 to 2*pi, Used to calculate tail angle"
      },
      { "field": "tail_move_speed", "type": "Float" },
      { "field": "right_arm_angle", "type": "Float" }
    ],
    "GiantFrog": [
      { "field": "door_front_layer", "type": "EntityPointer" },
      { "field": "door_back_layer", "type": "EntityPointer" },
      { "field": "platform", "type": "EntityPointer" },
      { "field": "attack_timer", "type": "UnsignedWord" },
      {
        "field": "frogs_ejected_in_cycle",
        "type": "UnsignedByte",
        "comment": "ejects thee frogs in quick succession, then waits a longer time"
      },
      { "field": "invincibility_timer", "type": "UnsignedByte" },
      { "field": "mouth_close_timer", "type": "UnsignedByte" },
      {
        "field": "mouth_open_trigger",
        "type": "Bool",
        "comment": "opens the mouth and starts mouth_close_timer, used when detecting grub in the mouth area"
      },
      { "field": "padding1", "type": "UnsignedByte" },
      { "field": "padding2", "type": "UnsignedByte" }
    ],
    "Frog": [
      { "field": "grub_being_eaten_uid", "type": "EntityUID" },
      {
        "field": "jump_timer",
        "type": "UnsignedByte",
        "comment": "when 0 it jumps"
      },
      { "field": "pause", "type": "Bool", "comment": "not actually used?" },
      { "field": "padding", "type": "UnsignedWord" }
    ],
    "FireFrog": [{ "field": "sound", "type": "SoundMeta" }],
    "Grub": [
      {
        "field": "rotation_delta",
        "type": "Float",
        "comment": "is it? i seen it in the code compared as a bit with 1, but not sure when it happens"
      },
      { "field": "drop", "type": "Bool" },
      { "field": "rotation_direction", "type": "Bool", "comment": "Counter-clockwise if true" },
      {
        "field": "wall_collision_cooldown",
        "type": "UnsignedByte",
        "comment": "used when he touches floor/wall/ceiling"
      },
      { "field": "padding1", "type": "UnsignedByte" },
      {
        "field": "rotation_timer",
        "type": "UnsignedWord",
        "comment": "randomly picks whether to crawl clockwise/counter-clockwise, and picks another angle"
      },
      {
        "field": "walk_pause_timer",
        "type": "UnsignedWord",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      { "field": "turn_into_fly_timer", "type": "Word" },
      { "field": "padding2", "type": "UnsignedWord" },
      { "field": "particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "sound", "type": "SoundMeta" }
    ],
    "Tadpole": [
      {
        "field": "acceleration_timer",
        "type": "UnsignedByte",
        "comment": "when 0, the tadpole gets some horizontal velocity"
      },
      { "field": "player_spotted", "type": "Bool" }
    ],
    "GiantFly": [
      { "field": "head_entity", "type": "EntityPointer" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "sine_amplitude", "type": "Float" },
      { "field": "sine_frequency", "type": "Float" },
      {
        "field": "delta_y_angle",
        "type": "Float",
        "comment": "determines where in the sine wave we are (0 - 2 pi)"
      },
      { "field": "unknown7", "type": "Float" },
      { "field": "unknown8", "type": "Float" },
      { "field": "sine_counter", "type": "UnsignedByte" }
    ],
    "JumpDog": [
      {
        "field": "walk_pause_timer",
        "type": "UnsignedWord",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      {
        "field": "squish_timer",
        "type": "UnsignedWord",
        "comment": "squish after jumped on; don't put it too high, the game puts it at 60 frames / 1 sec"
      }
    ],
    "EggplantMinister": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "unknown1",
        "type": "UnsignedByte",
        "comment": "checks flag 0x2F of 64-bit{flags, more_flags}, maybe prevent from squishing when stomped while falling?"
      },
      {
        "field": "walk_pause_timer",
        "type": "UnsignedByte",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      { "field": "squish_timer", "type": "UnsignedWord" }
    ],
    "Yama": [
      {
        "field": "message_shown",
        "type": "Bool",
        "comment": "Every king and queen will someday lose their crown..."
      }
    ],
    "Hundun": [
      {
        "field": "applied_hor_velocity?",
        "type": "Float",
        "comment": "during flight"
      },
      { "field": "applied_ver_velocity?", "type": "Float" },
      { "field": "birdhead_entity_uid", "type": "EntityUID" },
      { "field": "snakehead_entity_uid", "type": "EntityUID" },
      { "field": "floor_level", "type": "Float" },
      {
        "field": "bounce_timer",
        "type": "UnsignedWord",
        "comment": "functionality depends on state, determines when it can bounce again, also how long velocity is applied for bouncing"
      },
      { "field": "fireball_timer", "type": "UnsignedByte" },
      { "field": "birdhead_defeated", "type": "Bool" },
      { "field": "snakehead_defeated", "type": "Bool" },
      {
        "field": "hundun_flags",
        "type": "Flags8",
        "flags": {
          "1": "Will move to the left",
          "2": "Birdhead emerged",
          "3": "Snakehead emerged",
          "4": "Top level arena reached",
          "5": "Birdhead shot last (to alternate the heads shooting fireballs)",
          "6": "Unused",
          "7": "Unused",
          "8": "Unused"
        }
      }
    ],
    "HundunHead": [
      {
        "field": "attack_position_x",
        "type": "Float",
        "comment": "Position where the head will move"
      },
      {
        "field": "attack_position_y",
        "type": "Float",
        "comment": "Position where the head will move"
      },
      { "field": "egg_crack_effect_uid", "type": "EntityUID" },
      { "field": "targeted_player_uid", "type": "EntityUID" },
      {
        "field": "looking_for_target_timer",
        "type": "UnsignedWord",
        "comment": "also cool down before attack"
      },
      { "field": "invincibility_timer", "type": "UnsignedByte" }
    ],
    "MegaJellyfish": [
      { "field": "flipper1", "type": "EntityPointer" },
      { "field": "flipper2", "type": "EntityPointer" },
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "orb_uid",
        "type": "EntityUID",
        "comment": "the closest orb, does not gets updated"
      },
      { "field": "tail_bg_uid", "type": "EntityUID" },
      { "field": "applied_velocity", "type": "Float" },
      {
        "field": "wagging_tail_counter",
        "type": "Float",
        "comment": "float counter to determine position of wagging tail (0 = right ; pi = left)"
      },
      {
        "field": "flipper_distance",
        "type": "UnsignedByte",
        "comment": "only applies to door-blocking one"
      },
      { "field": "velocity_application_timer", "type": "UnsignedByte" }
    ],
    "Scorpion": [
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      {
        "field": "jump_cooldown_timer",
        "type": "UnsignedDword",
        "comment": "only 10 frames"
      }
    ],
    "Hermitcrab": [
      { "field": "carried_entity_type", "type": "EntityDBID" },
      { "field": "carried_entity_uid", "type": "EntityUID" },
      {
        "field": "walk_spit_timer",
        "type": "UnsignedWord",
        "comment": "depending on movable.state either the countdown how many acid bubbles spat (3) or walking timer"
      },
      {
        "field": "is_active",
        "type": "Bool",
        "comment": "whether it is hidden behind the carried block or not, if true you can damage him"
      },
      {
        "field": "is_inactive",
        "type": "Bool",
        "comment": "must be something else, since we already have is_active (or vice versa), gets triggered about have a second after is_active, maybe something like, can attack"
      },
      {
        "field": "spawn_new_carried_item",
        "type": "Bool",
        "comment": "defaults to true, when toggled to false, a new carried item spawns"
      },
      {
        "field": "moving_up",
        "type": "Bool",
        "comment": "when climbing a pole"
      }
    ],
    "Necromancer": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "red_skeleton_spawn_x", "type": "Float" },
      { "field": "red_skeleton_spawn_y", "type": "Float" },
      { "field": "resurrection_uid", "type": "EntityUID" },
      { "field": "target_layer", "type": "UnsignedByte" },
      { "field": "resurrection_timer", "type": "UnsignedByte" }
    ],
    "ProtoShopkeeper": [
      { "field": "unknown1", "type": "UnsignedQword" },
      {
        "field": "movement_state",
        "type": "Flags8",
        "flags": {
          "1": "Headpulse/explosion related",
          "2": "Walking",
          "3": "Headpulse/explosion related",
          "4": "Crawling",
          "5": "",
          "6": "Headpulse/explosion related",
          "7": "",
          "8": ""
        }
      },
      { "field": "padding1", "type": "UnsignedByte" },
      { "field": "padding2", "type": "UnsignedByte" },
      { "field": "blowup_related", "type": "UnsignedByte" },
      { "field": "animation_timer", "type": "UnsignedDword" },
      {
        "field": "walk_pause_explode_timer",
        "type": "UnsignedWord",
        "comment": "alternates between walking and pausing; when stunned: crawl timer;  after crawling: head pulse timer (pulse frequency depended on timer)"
      },
      {
        "field": "walking_speed",
        "type": "UnsignedByte",
        "comment": "0 = slow; 4 = fast"
      },
      { "field": "padding7", "type": "UnsignedByte" },
      {
        "field": "unknown3",
        "type": "UnsignedDword",
        "comment": "counts down from 10 to 3 in the headpulse phase"
      }
    ],
    "Beg": [
      {
        "field": "walk_pause_timer",
        "type": "UnsignedDword",
        "comment": "alternates between walking and pausing when timer reaches zero"
      },
      { "field": "disappear_timer", "type": "UnsignedWord" }
    ],
    "Critter": [
      { "field": "last_picked_up_by_uid", "type": "EntityUID" },
      { "field": "holding_state", "type": "UnsignedByte" },
      { "field": "padding1", "type": "UnsignedByte" },
      { "field": "padding2", "type": "UnsignedByte" },
      { "field": "padding3", "type": "UnsignedByte" }
    ],
    "CritterBeetle": [
      {
        "field": "pause",
        "type": "Bool",
        "comment": "used when he's getting eaten"
      }
    ],
    "CritterCrab": [
      {
        "field": "walk_pause_timer",
        "type": "UnsignedByte",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      { "field": "walking_left", "type": "Bool" },
      {
        "field": "unfriendly",
        "type": "Bool",
        "comment": "moves away from its target instead of towards it"
      }
    ],
    "CritterButterfly": [
      { "field": "unknown1a", "type": "Qword" },
      { "field": "unknown1", "type": "UnsignedByte" },
      { "field": "change_direction_timer", "type": "UnsignedByte" },
      { "field": "unknown2", "type": "UnsignedByte" },
      { "field": "vertical_flight_direction", "type": "Byte" }
    ],
    "CritterLocust": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "jump_timer",
        "type": "UnsignedByte",
        "comment": "when 0 it jumps"
      },
      { "field": "unknown1", "type": "UnsignedByte" }
    ],
    "CritterSnail": [
      {
        "vftablefunctions": {
          "101": { "name": "get_speed", "return": "float" }
        }
      },
      { "field": "x_direction", "type": "Float" },
      { "field": "y_direction", "type": "Float" },
      { "field": "pos_x", "type": "Float" },
      { "field": "pos_y", "type": "Float" },
      { "field": "rotation_center_x", "type": "Float" },
      { "field": "rotation_center_y", "type": "Float" },
      { "field": "rotation_angle", "type": "Float" },
      { "field": "rotation_speed", "type": "Float" }
    ],
    "CritterFish": [
      {
        "field": "swim_pause_timer",
        "type": "UnsignedByte",
        "comment": "alternates between swimming and pausing every time it reaches zero"
      },
      {
        "field": "player_in_proximity",
        "type": "Bool",
        "comment": "swims away fast when player detected"
      }
    ],
    "CritterPenguin": [
      {
        "field": "walk_pause_timer",
        "type": "UnsignedByte",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      { "field": "padding", "type": "UnsignedByte" },
      { "field": "jump_timer", "type": "UnsignedWord" }
    ],
    "CritterFirefly": [
      { "field": "sine_amplitude", "type": "Float" },
      { "field": "sine_frequency", "type": "Float" },
      {
        "field": "sine_angle",
        "type": "Float",
        "comment": "determines where in the sine wave we are (0 - 2 pi)"
      },
      { "field": "unknown1", "type": "Float" },
      { "field": "unknown2", "type": "Float" },
      { "field": "change_direction_timer", "type": "UnsignedByte" },
      { "field": "sit_timer", "type": "UnsignedByte" },
      { "field": "sit_cooldown_timer", "type": "UnsignedByte" }
    ],
    "CritterDrone": [
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "applied_hor_momentum", "type": "Float" },
      { "field": "applied_ver_momentum", "type": "Float" },
      {
        "field": "unfriendly",
        "type": "Bool",
        "comment": "moves away from its target instead of towards it"
      },
      { "field": "move_timer", "type": "UnsignedByte" }
    ],
    "CritterSlime": [
      {
        "vftablefunctions": {
          "101": { "name": "get_speed", "return": "float" }
        }
      },
      { "field": "x_direction", "type": "Float" },
      { "field": "y_direction", "type": "Float" },
      { "field": "pos_x", "type": "Float" },
      { "field": "pos_y", "type": "Float" },
      { "field": "rotation_center_x", "type": "Float" },
      { "field": "rotation_center_y", "type": "Float" },
      { "field": "rotation_angle", "type": "Float" },
      { "field": "rotation_speed", "type": "Float" },
      {
        "field": "walk_pause_timer",
        "type": "Word",
        "comment": "alternates between walking and pausing every time it reaches zero"
      }
    ],
    "Projectile": [
      {
        "vftablefunctions": {
          "93": {
            "name": "v93",
            "params": "float angle, float speed, Entity* responsible",
            "comment": "called when shooting (entity it still not added to layer), sets the initial velocities and owner"
          },
          "94": {
            "name": "v94",
            "params": "Entity* responsible, float x",
            "comment": "called when shooting (entity it still not added to layer), returns false when the responsible doesn't have overlay, checks if the overlay is MASK.ITEM and bunch of other stuff"
          }
        }
      }
    ],
    "Mount": [
      {
        "vftablefunctions": {
          "95": {
            "name": "get_rider_offset",
            "params": "Vec2& output",
            "return": "Vec2&"
          },
          "96": {
            "name": "get_rider_offset_crouching",
            "params": "Vec2& output",
            "return": "Vec2&"
          },
          "97": {
            "name": "used_double_jump",
            "return": "bool",
            "comment": "checks can_doublejump and unknown9b"
          },
          "98": {
            "name": "get_jump_sound",
            "params": "bool double_jump",
            "return": "uint32_t",
            "comment": "returns sound id"
          },
          "99": {
            "name": "get_attack_sound",
            "return": "uint32_t",
            "comment": "returns sound id"
          },
          "100": { "name": "play_jump_on_sound" },
          "101": { "name": "remove_rider" },
          "102": {
            "name": "v102",
            "return": "float",
            "comment": "mech returns 0.9, the rest 0.5, related to distance at which the player can mount"
          },
          "103": {
            "name": "get_mounting_sound",
            "return": "uint32_t",
            "comment": "returns sound id"
          },
          "104": {
            "name": "get_walking_sound",
            "return": "uint32_t",
            "comment": "returns sound id"
          },
          "105": {
            "name": "get_untamed_loop_sound",
            "return": "uint32_t",
            "comment": "returns sound id"
          },
          "106": {
            "name": "can_play_mount_sound",
            "return": "bool",
            "comment": "called every frame, if returns true mount will make a sound"
          }
        }
      },
      { "field": "rider_uid", "type": "EntityUID", "comment": "who rides it" },
      { "field": "padding1", "type": "Skip", "offset": 4 },
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "can_doublejump",
        "type": "Bool",
        "comment": "whether the doublejump has already occurred or not"
      },
      { "field": "tamed", "type": "Bool" },
      {
        "field": "walk_pause_timer",
        "type": "UnsignedWord",
        "comment": "alternates between walking and pausing every time it reaches zero"
      },
      { "field": "unknown9a", "type": "UnsignedByte" },
      {
        "field": "double_jumping",
        "type": "UnsignedByte",
        "comment": "used to play different animation for the double jump then the standard jump, is true for less then a frame"
      },
      {
        "field": "taming_timer",
        "type": "UnsignedByte",
        "comment": "when 0 it's tame"
      },
      { "field": "padding2", "type": "Skip", "offset": 1 }
    ],
    "Rockdog": [{ "field": "attack_cooldown", "type": "UnsignedByte" }],
    "Axolotl": [
      { "field": "attack_cooldown", "type": "UnsignedByte" },
      { "field": "can_teleport", "type": "Bool" },
      { "field": "unknown", "type": "UnsignedByte" }
    ],
    "Mech": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "explosion_sound", "type": "SoundMeta" },
      { "field": "unknown1", "type": "UnsignedQword" },
      { "field": "gun_cooldown", "type": "UnsignedByte" },
      { "field": "unknown2", "type": "UnsignedByte" },
      { "field": "walking", "type": "Bool" },
      { "field": "breaking_wall", "type": "Bool" }
    ],
    "Qilin": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "attack_cooldown",
        "type": "UnsignedByte",
        "comment": "not actually used? you can fire again before it's 0"
      }
    ],
    "Ushabti": [
      { "field": "wiggle_timer", "type": "UnsignedWord" },
      { "field": "shine_timer", "type": "UnsignedByte" }
    ],
    "Generator": [
      {
        "vftablefunctions": {
          "40": {
            "name": "randomize_timer",
            "comment": "called after it spawns entity and it's 'ready' (have proper flags set etc.)"
          }
        }
      },
      { "field": "spawned_uid", "type": "EntityUID" },
      { "field": "set_timer", "type": "UnsignedWord" },
      { "field": "timer", "type": "UnsignedWord" },
      {
        "field": "start_counter",
        "type": "UnsignedByte",
        "comment": "works only for star challenge"
      },
      {
        "field": "on_off",
        "type": "Bool",
        "comment": "works only for star challenge"
      }
    ],
    "HorizontalForceField": [
      {
        "field": "first_item_beam",
        "type": "EntityPointer",
        "comment": "if killed, the whole beam goes out"
      },
      { "field": "fx", "type": "EntityPointer" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "laser_bounce?", "type": "Float" },
      {
        "field": "timer",
        "type": "UnsignedWord",
        "comment": "As opposite to the vertical one, this one counts for the on and the for the off state"
      },
      { "field": "is_on", "type": "Bool" }
    ],
    "ForceField": [
      {
        "field": "first_item_beam",
        "type": "EntityPointer",
        "comment": "if killed, the whole beam goes out"
      },
      { "field": "fx", "type": "EntityPointer" },
      {
        "field": "sound",
        "type": "SoundMeta",
        "comment": "starts at timer 140"
      },
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "bounce_force?", "type": "Float", "comment": "max 1.0 ?" },
      {
        "field": "is_on",
        "type": "Bool",
        "comment": "starts the sound + first_item_beam but not fx for some reason"
      },
      { "field": "unused1", "type": "UnsignedByte" },
      { "field": "unused2", "type": "UnsignedWord" }
    ],
    "TimedForceField": [
      {
        "field": "timer",
        "type": "UnsignedDword",
        "comment": "max 300? at 100 it's start the process, changing the animation_frame"
      },
      { "field": "pause", "type": "Bool" }
    ],
    "StickyTrap": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      { "field": "attached_piece_uid", "type": "EntityUID" },
      { "field": "ball_uid", "type": "EntityUID" },
      {
        "field": "state",
        "type": "State8",
        "states": {
          "0": "none",
          "1": "start",
          "2": "going_down",
          "3": "down_position",
          "4": "going_up",
          "5": "pause"
        }
      },
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "for the start and for the retract"
      }
    ],
    "SpikeballTrap": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "chain", "type": "EntityPointer" },
      { "field": "end_piece", "type": "EntityPointer" },
      {
        "field": "state",
        "type": "State8",
        "states": {
          "0": "none",
          "1": "start",
          "2": "going_down",
          "3": "going_up",
          "4": "pause"
        },
        "comment": "going_up is only right when timer is 0, otherwise it just sits at the bottom"
      },
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "for the start and retract"
      },
      {
        "field": "speed_direction?",
        "type": "UnsignedByte",
        "comment": "i have no clue what this is, goes 255 when detecting something, but when it hits the unbreakable tile it 255 for ever, changing it can teleport it up/down/change speed etc."
      }
    ],
    "SlidingWallCeiling": [
      { "field": "attached_piece", "type": "EntityPointer" },
      { "field": "active_floor_part_uid", "type": "EntityUID" },
      {
        "field": "state",
        "type": "Flags8",
        "flags": {
          "1": "Top",
          "2": "pause",
          "3": "wrong_pause",
          "4": "wrong_pause",
          "5": "wrong_pause",
          "6": "wrong_pause",
          "7": "wrong_pause",
          "8": "wrong_pause"
        },
        "comment": "i labeled some as wrong_pause cause they are probably not used, they pause the movement but not the sound"
      },
      { "field": "unused1", "type": "UnsignedByte" },
      { "field": "unused2", "type": "UnsignedWord" },
      { "field": "ball_rise", "type": "SoundMeta" },
      { "field": "ball_drop", "type": "SoundMeta" }
    ],
    "Elevator": [
      { "field": "emitted_light", "type": "IlluminationPointer" },
      {
        "field": "timer",
        "type": "UnsignedDword",
        "comment": "counts from 60 to 0"
      },
      { "field": "moving_up", "type": "Bool" }
    ],
    "Boulder": [
      { "field": "unknown1", "type": "DataPointer" },
      {
        "field": "is_rolling",
        "type": "UnsignedByte",
        "comment": "is set to 1 when the boulder first hits the ground"
      }
    ],
    "Drill": [
      { "field": "sound1", "type": "SoundMeta" },
      { "field": "sound2", "type": "SoundMeta" },
      { "field": "top_chain_piece", "type": "EntityPointer" },
      {
        "field": "unknown1",
        "type": "UnsignedByte",
        "comment": "it's forced to 0, for whatever reason"
      }
    ],
    "UdjatSocket": [{ "field": "fx_button", "type": "EntityPointer" }],
    "PushBlock": [
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "dust_particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "dest_pos_x", "type": "Float" },
      { "field": "unused", "type": "UnsignedDword" }
    ],
    "Bullet": [{ "field": "unknown1", "type": "UnknownPointerGroup" }],
    "TeleportingBorder": [
      {
        "field": "direction",
        "type": "State8",
        "states": {
          "0": "right",
          "1": "left",
          "2": "bottom",
          "3": "top",
          "4": "disable"
        }
      }
    ],
    "WoodenlogTrap": [
      { "field": "ceiling_1_uid", "type": "EntityUID" },
      { "field": "ceiling_2_uid", "type": "EntityUID" },
      { "field": "falling_speed", "type": "Float" },
      {
        "field": "unknown1",
        "type": "UnsignedByte",
        "comment": "it's forced to 0, for whatever reason"
      }
    ],
    "BoneBlock": [
      {
        "field": "unknown1",
        "type": "Float",
        "comment": "1.0 when hit from left and -1.0 when hit from right"
      }
    ],
    "TimedPowderkeg": [
      {
        "field": "timer",
        "type": "Dword",
        "comment": "timer till explosion, it's paused when negative, can be stooped"
      }
    ],
    "ChainedPushBlock": [
      {
        "field": "is_chained",
        "type": "Bool",
        "comment": "changing this when chained does nothing, when unchained it's forced to 0"
      }
    ],
    "LightArrowPlatform": [
      { "field": "unused", "type": "UnsignedQword" },
      { "field": "emitted_light", "type": "IlluminationPointer" }
    ],
    "FallingPlatform": [
      { "field": "timer", "type": "Dword" },
      { "field": "shaking_factor", "type": "Float" },
      { "field": "y_pos", "type": "Float" }
    ],
    "TrapPart": [{ "field": "ceiling", "type": "EntityPointer" }],
    "UnchainedSpikeBall": [
      {
        "field": "bounce",
        "type": "Bool",
        "comment": "if false it bounces when hitting the ground, it's also forced to true when moving sideways or rolling, can be changed to true in the air for weird effect"
      }
    ],
    "ThinIce": [
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      {
        "field": "strength",
        "type": "UnsignedWord",
        "comment": "counts frames when standing on, maximum is 134 as based of this value it changes animation_frame, and above that value it changes to wrong sprite"
      }
    ],
    "ClamBase": [
      { "field": "treasure_type", "type": "EntityDBID" },
      {
        "field": "treasure_uid",
        "type": "EntityUID",
        "comment": "set to nothing when spawning in overlunky"
      },
      { "field": "treasure_x_pos", "type": "Float" },
      { "field": "treasure_y_pos", "type": "Float" },
      { "field": "top_part_uid", "type": "EntityUID" }
    ],
    "RegenBlock": [{ "field": "on_breaking", "type": "Bool" }],
    "GiantClamTop": [
      { "field": "close_timer", "type": "Byte" },
      { "field": "open_timer", "type": "UnsignedByte" }
    ],
    "CookFire": [
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "particles_smoke", "type": "ParticleEmitterInfoPointer" },
      { "field": "particles_flames", "type": "ParticleEmitterInfoPointer" },
      { "field": "particles_warp", "type": "ParticleEmitterInfoPointer" },
      { "field": "sound", "type": "SoundMeta" }
    ],
    "Floor": [
      {
        "vftablefunctions": {
          "37": {
            "name": "decorate_internal",
            "comment": "decorates undecorated floor and floorstyled, doesn't remove old decorations, runs only on level gen"
          },
          "38": {
            "name": "on_neighbor_destroyed",
            "comment": "called for every neighbor of destroyed floor (to decorate it, maybe something else)"
          },
          "39": {
            "name": "get_floor_type",
            "return": "uint32_t",
            "comment": "Returns it's ENT_TYPE except for FLOOR_PEN (returns FLOORSTYLED_MINEWOOD) and FLOOR_QUICKSAND, FLOOR_TOMB, FLOOR_EMPRESS_GRAVE which return FLOOR_GENERIC. Used for spawning decorations"
          }
        }
      },
      { "field": "deco_top", "type": "EntityUID" },
      { "field": "deco_bottom", "type": "EntityUID" },
      { "field": "deco_left", "type": "EntityUID" },
      { "field": "deco_right", "type": "EntityUID" }
    ],
    "LightEmitter": [
      { "field": "emitted_light", "type": "IlluminationPointer" }
    ],
    "Door": [
      {
        "vftablefunctions": {
          "40": {
            "name": "on_enter_attempt",
            "params": "Entity*",
            "comment": "this function doesn't do much, checks if it's CHAR_*, checks if hes holding anything (if yes calls some function), then checks if Player.can_use is equal to 4 calls some other function, can't be bother to look into the functions"
          },
          "41": {
            "name": "hide_ui",
            "params": "Entity*",
            "comment": "check if it's CHAR_*, then sets State.level_flags -> 21 (Hide HUD, transition)"
          },
          "42": {
            "name": "enter",
            "params": "Entity*",
            "return": "uint8_t",
            "comment": "Returns the entity state / behavior id to set the entity to after the entering animation."
          },
          "43": {
            "name": "entered_from_front_layer",
            "params": "Entity*",
            "return": "bool",
            "comment": "checks layer of the Entity entering, except for FLOOR_DOOR_EGGSHIP_ROOM which gets the overlay (BG_EGGSHIP_ROOM) and returns BGEggshipRoom.player_in"
          },
          "44": {
            "name": "light_level",
            "return": "float",
            "comment": "returns 0.0 except for eggship doors, for example: FLOOR_DOOR_EGGSHIP_ROOM returns 0.75 when entering the room, and 1.0 when exiting, runs every frame while entering/exiting"
          },
          "45": {
            "name": "is_door_unlocked",
            "return": "bool",
            "comment": "Should display the button prompt when collided by player. Will always return `true` for exits, layers and others that the game never locks"
          },
          "46": {
            "name": "can_enter",
            "params": "Entity* player",
            "return": "bool",
            "comment": "Can the door actually be entered by player. Overrides the button prompt too if false"
          }
        }
      },
      {
        "field": "counter",
        "type": "UnsignedByte",
        "comment": "counts down as you go thru it "
      },
      { "field": "unused1", "type": "Byte" },
      { "field": "unused2", "type": "Word" },
      { "field": "unused3", "type": "Dword" },
      { "field": "fx_button", "type": "EntityPointer" }
    ],
    "ExitDoor": [
      {
        "field": "entered",
        "type": "Bool",
        "comment": "if true entering it does not load the transition, probably for use in multiplayer"
      },
      {
        "field": "special_door",
        "type": "Bool",
        "comment": "use provided world/level/theme"
      },
      { "field": "level", "type": "UnsignedByte" },
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "counts from 30 to 0, dunno why"
      },
      { "field": "world", "type": "UnsignedByte" },
      { "field": "theme", "type": "UnsignedByte" },
      { "field": "padding", "type": "UnsignedWord" }
    ],
    "DecoratedDoor": [{ "field": "special_bg", "type": "EntityPointer" }],
    "CityOfGoldDoor": [
      { "field": "unlocked", "type": "Bool" },
      { "field": "unknown1", "type": "UnsignedByte" }
    ],
    "LockedDoor": [{ "field": "unlocked", "type": "Bool" }],
    "MainExit": [
      {
        "field": "door_blocker",
        "type": "EntityPointer",
        "comment": "normally FX_MAIN_EXIT_DOOR , but any value will block the door"
      },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "top_value?", "type": "Float" },
      { "field": "value?", "type": "Float" }
    ],
    "EggShipDoor": [
      { "field": "unused1", "type": "UnsignedWord" },
      { "field": "unused2", "type": "UnsignedByte" },
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "counts from 30 to 0, dunno why"
      },
      { "field": "unknown3", "type": "UnsignedWord" },
      { "field": "unknown4", "type": "UnsignedWord" }
    ],
    "TotemTrap": [
      { "field": "unknown1", "type": "UnsignedDword" },
      {
        "field": "unknown2",
        "type": "Float",
        "comment": "might be sound delay related, cannot reproduce anymore"
      },
      { "field": "unknown3", "type": "Float" },
      { "field": "spawn_entity_type", "type": "EntityDBID" },
      { "field": "first_sound_id", "type": "UnsignedDword" },
      {
        "field": "counter",
        "type": "Dword",
        "comment": "adds some value depending on trap and with side is triggered, setting to low value pauses it?"
      },
      { "field": "unknown4", "type": "UnsignedByte", "comment": "forced to 1" },
      { "field": "unused1", "type": "UnsignedByte" },
      { "field": "unused2", "type": "UnsignedWord" },
      { "field": "unused3", "type": "UnsignedDword" },
      { "field": "timer?", "type": "UnsignedByte" }
    ],
    "BigSpearTrap": [
      { "field": "spear_uid", "type": "EntityUID" },
      { "field": "active?", "type": "UnsignedByte", "comment": "forced to 1" },
      {
        "field": "left_part",
        "type": "Bool",
        "comment": "setting the left part to 0 or right part to 1 destroys the trap"
      }
    ],
    "LaserTrap": [
      { "field": "emitted_light", "type": "IlluminationPointer" },
      {
        "field": "timer",
        "type": "UnsignedWord",
        "comment": "counts up from 0 after triggering, cannot shoot again until 360"
      }
    ],
    "SparkTrap": [
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "spark_uid", "type": "EntityUID" }
    ],
    "TransferFloor": [
      {
        "field": "transferred_entities",
        "type": "StdUnorderedMap",
        "comment": "unordered_map<int32_t, uint32_t> key is the uid, value is frame entity entered the floor"
      }
    ],
    "ConveyorBelt": [
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      { "field": "timer", "type": "UnsignedByte", "comment": "0 to 15" },
      { "field": "timer2?", "type": "UnsignedByte" }
    ],
    "QuickSand": [
      { "field": "unknown_timer1", "type": "UnsignedByte" },
      { "field": "unknown_timer2", "type": "UnsignedByte" },
      { "field": "unknown_timer3", "type": "UnsignedByte" },
      { "field": "unknown_timer4", "type": "UnsignedByte" }
    ],
    "Pipe": [
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      {
        "field": "direction_type",
        "type": "State8",
        "states": {
          "3": "straight_horizontal",
          "4": "blocked",
          "5": "down_left_turn",
          "6": "down_right_turn",
          "8": "blocked",
          "9": "up_left_turn",
          "10": "up_right_turn",
          "12": "straight_vertical",
          "2": "straight_??"
        }
      },
      { "field": "end_pipe", "type": "Bool" }
    ],
    "MotherStatue": [
      { "field": "player1_standing", "type": "Bool" },
      { "field": "player2_standing", "type": "Bool" },
      { "field": "player3_standing", "type": "Bool" },
      { "field": "player4_standing", "type": "Bool" },
      { "field": "player1_health_received", "type": "Bool" },
      { "field": "player2_health_received", "type": "Bool" },
      { "field": "player3_health_received", "type": "Bool" },
      { "field": "player4_health_received", "type": "Bool" },
      { "field": "player1_health_timer", "type": "UnsignedWord" },
      { "field": "player2_health_timer", "type": "UnsignedWord" },
      { "field": "player3_health_timer", "type": "UnsignedWord" },
      { "field": "player4_health_timer", "type": "UnsignedWord" },
      { "field": "eggplantchild_timer", "type": "UnsignedByte" },
      { "field": "unknown", "type": "UnsignedByte" },
      { "field": "eggplantchild_detected", "type": "Bool" }
    ],
    "TentacleBottom": [
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      { "field": "attached_piece_uid", "type": "EntityUID" },
      { "field": "tentacle_uid", "type": "EntityUID" },
      {
        "field": "state",
        "type": "State8",
        "states": {
          "0": "none",
          "1": "start",
          "2": "moving up",
          "3": "at the top",
          "4": "moving down",
          "5": "pause"
        }
      }
    ],
    "Flame": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "emitted_light", "type": "IlluminationPointer" }
    ],
    "TorchFlame": [
      { "field": "smoke_particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "flame_particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "warp_particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "flame_size", "type": "Float" }
    ],
    "LampFlame": [
      { "field": "flame_particle", "type": "ParticleEmitterInfoPointer" }
    ],
    "FlameSize": [
      {
        "field": "flame_size",
        "type": "Float",
        "comment": "if changed, gradually goes down (0.03 per frame) to the default size"
      }
    ],
    "PoleDeco": [
      { "field": "deco_up", "type": "EntityUID" },
      { "field": "deco_down", "type": "EntityUID" }
    ],
    "PunishBall": [
      { "field": "attached_to_uid", "type": "EntityUID" },
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "counts down from 20 while the ball is eligible to break a floor and tries to break it at 0"
      },
      { "field": "unused1", "type": "UnsignedByte" },
      { "field": "unused2", "type": "UnsignedWord" },
      { "field": "x_pos", "type": "Float" },
      { "field": "y_pos", "type": "Float" }
    ],
    "Chest": [
      { "field": "leprechaun", "type": "Bool" },
      {
        "field": "bomb",
        "type": "Bool",
        "comment": "size of the bomb is random, if set both true only leprechaun spawns"
      }
    ],
    "ClimbableRope": [
      { "field": "segment_nr_inverse", "type": "UnsignedDword" },
      {
        "field": "burn_timer",
        "type": "Dword",
        "comment": "entity is killed after 20"
      },
      { "field": "above_part", "type": "EntityPointer" },
      { "field": "below_part", "type": "EntityPointer" },
      { "field": "segment_nr", "type": "UnsignedDword" },
      { "field": "unused", "type": "UnsignedDword" },
      { "field": "unknown", "type": "UnsignedQword" }
    ],
    "LiquidSurface": [
      { "field": "glow_radius", "type": "Float" },
      {
        "field": "sine_pos",
        "type": "Float",
        "comment": "x position to calculate sine wave, it moves the glow back and forth"
      },
      {
        "field": "sine_pos_increment",
        "type": "Float",
        "comment": "just an on frame increment for the value above"
      }
    ],
    "Lava": [{ "field": "emitted_light", "type": "IlluminationPointer" }],
    "Liquid": [
      { "field": "fx_surface", "type": "EntityPointer" },
      {
        "field": "x_pos?",
        "type": "Float",
        "comment": "for some reason accesses as Qword?, only updated when the position changes drastically"
      },
      { "field": "y_pos?", "type": "Float" },
      { "field": "liquid_id_list_pointer", "type": "StdListIteratorPointer" },
      { "field": "unknown2", "type": "UnsignedWord" },
      { "field": "unknown3", "type": "UnsignedWord" },
      { "field": "unknown_timer1", "type": "Byte" },
      {
        "field": "pos_update_timer",
        "type": "Byte",
        "comment": "when 0, updates x_pos and y_pos"
      },
      { "field": "unknown_timer3", "type": "Byte" },
      { "field": "unk21", "type": "Byte" }
    ],
    "Pot": [
      { "field": "inside", "type": "EntityDBID" },
      {
        "field": "dont_transfer_dmg",
        "type": "Bool",
        "comment": "if false, spawned entity will receive dmg that the pot received"
      }
    ],
    "Coffin": [
      { "field": "inside", "type": "EntityDBID" },
      { "field": "timer", "type": "UnsignedByte" },
      { "field": "shake_state?", "type": "Byte" },
      {
        "field": "player_respawn",
        "type": "Bool",
        "comment": "if true, will respawn dead player instead of HH, doesn't work with Anubis coffin"
      }
    ],
    "SpecialShot": [
      { "field": "target_x", "type": "Float" },
      { "field": "target_y", "type": "Float" }
    ],
    "Idol": [
      {
        "field": "trap_triggered",
        "type": "Bool",
        "comment": "if you set it to true for the ice caves or volcano idol, the trap won't trigger"
      },
      {
        "field": "touch",
        "type": "Byte",
        "comment": "changes to 0 when first picked up by player and back to -1 if HH picks it up"
      },
      { "field": "unused", "type": "UnsignedWord" },
      { "field": "spawn_x", "type": "Float" },
      { "field": "spawn_y", "type": "Float" }
    ],
    "Spear": [{ "field": "sound_id", "type": "UnsignedDword" }],
    "JungleSpearCosmetic": [
      { "field": "move_x", "type": "Float" },
      { "field": "move_y", "type": "Float" }
    ],
    "WebShot": [
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      { "field": "unknown2", "type": "Float" },
      {
        "field": "shot",
        "type": "Bool",
        "comment": "if false, it's attached to the gun"
      }
    ],
    "HangAnchor": [{ "field": "spider_uid", "type": "EntityUID" }],
    "HangStrand": [{ "field": "start_pos_y", "type": "Float" }],
    "Arrow": [
      {
        "vftablefunctions": {
          "94": {
            "name": "poison_arrow",
            "params": "bool poisoned"
          },
          "95": {
            "name": "light_up",
            "params": "bool lit"
          }
        }
      },
      { "field": "flame_uid", "type": "EntityUID" },
      { "field": "is_on_fire", "type": "Bool" },
      { "field": "is_poisoned", "type": "Bool" },
      { "field": "shot_from_trap", "type": "Bool" },
      { "field": "unused", "type": "Byte" }
    ],
    "LightArrow": [{ "field": "emitted_light", "type": "IlluminationPointer" }],
    "LightShot": [
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      { "field": "emitted_light", "type": "IlluminationPointer" }
    ],
    "SoundShot": [{ "field": "sound", "type": "SoundMeta" }],
    "ScepterShot": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "speed", "type": "Float" },
      {
        "field": "idle_timer",
        "type": "UnsignedWord",
        "comment": "short timer before it goes after target"
      },
      {
        "field": "unknown",
        "type": "Word",
        "comment": "setting it low or high can make it last forever, won't matter if you change it back afterwards, Anubis is 300 and player 400 by default"
      }
    ],
    "TimedShot": [{ "field": "timer", "type": "UnsignedByte" }],
    "CloneGunShot": [
      { "field": "timer", "type": "UnsignedByte" },
      { "field": "unused1", "type": "Byte" },
      { "field": "unused2", "type": "Word" },
      { "field": "spawn_y", "type": "Float" },
      {
        "field": "float_timer?",
        "type": "Float",
        "comment": "probably distance_traveled, needs to be verified"
      }
    ],
    "Spark": [
      { "field": "particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "fx_entity", "type": "EntityPointer" },
      { "field": "rotation_center_x", "type": "Float" },
      { "field": "rotation_center_y", "type": "Float" },
      { "field": "rotation_angle", "type": "Float" },
      {
        "field": "size",
        "type": "Float",
        "comment": "slowly goes down to default 1.0, is 0.0 when not on screen"
      },
      {
        "field": "size_multiply",
        "type": "Float",
        "comment": "0.0 when not on screen"
      },
      {
        "field": "next_size",
        "type": "Float",
        "comment": "width and height will be set to this value * size_multiply next frame"
      },
      {
        "field": "size_change_timer",
        "type": "UnsignedByte",
        "comment": "very short timer before next size change, giving a pulsing effect"
      }
    ],
    "TiamatShot": [{ "field": "sound", "type": "SoundMeta" }],
    "Fireball": [{ "field": "particle", "type": "ParticleEmitterInfoPointer" }],
    "Leaf": [
      { "field": "unknown1", "type": "Qword" },
      {
        "field": "fade_away_counter",
        "type": "Float",
        "comment": "counts to 100.0 then the leaf fades away"
      },
      { "field": "swing_direction", "type": "Dword" },
      {
        "field": "fade_away_trigger",
        "type": "Bool",
        "comment": "if set true, it will fade away after a while"
      }
    ],
    "AcidBubble": [
      { "field": "speed_x", "type": "Float" },
      { "field": "speed_y", "type": "Float" },
      { "field": "float_counter", "type": "Float" }
    ],
    "Claw": [
      { "field": "crabman_uid", "type": "EntityUID" },
      { "field": "spawn_x", "type": "Float" },
      { "field": "spawn_y", "type": "Float" }
    ],
    "StretchChain": [
      { "field": "at_end_of_chain_uid", "type": "EntityUID" },
      { "field": "dot_offset", "type": "Float" },
      {
        "field": "position_in_chain",
        "type": "UnsignedByte",
        "comment": "0 closest to the end, so if the chain has 15 segments the last one will be 14"
      },
      {
        "field": "inverse_doubled_position_in_chain",
        "type": "UnsignedByte",
        "comment": "only punish chain, (chain_length - position_in_chain) * 2"
      },
      {
        "field": "unknown_timer",
        "type": "UnsignedByte",
        "comment": "only punish chain"
      },
      {
        "field": "is_dot_hidden",
        "type": "Bool",
        "comment": "only punish chain"
      }
    ],
    "Treasure": [
      { "field": "unknown_state", "type": "UnsignedDword" },
      { "field": "cashed", "type": "Bool", "comment": "spawns a dust effect" },
      { "field": "unknown1", "type": "Byte" },
      { "field": "unknown2", "type": "Word" }
    ],
    "HundunChest": [
      { "field": "unknown3", "type": "UnsignedWord" },
      { "field": "unknown4", "type": "UnsignedByte" },
      { "field": "timer", "type": "UnsignedByte" }
    ],
    "Boombox": [
      { "field": "fx_button", "type": "EntityPointer" },
      { "field": "music_note1", "type": "ParticleEmitterInfoPointer" },
      { "field": "music_note2", "type": "ParticleEmitterInfoPointer" },
      { "field": "spawn_y", "type": "Float" },
      {
        "field": "station",
        "type": "Byte",
        "comment": "-1 to turn off and bring back normal camp music, anything above 10 is mute"
      },
      { "field": "station_change_delay", "type": "UnsignedByte" },
      { "field": "jump_timer", "type": "UnsignedByte" },
      { "field": "jump_state", "type": "UnsignedByte" }
    ],
    "TV": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "fx_button", "type": "EntityPointer" },
      { "field": "emitted_light", "type": "IlluminationPointer" },
      {
        "field": "station",
        "type": "UnsignedByte",
        "comment": "0 to turn off, anything above 3 has the music from station 3 and the screen doesn't change"
      }
    ],
    "Telescope": [
      { "field": "fx_button", "type": "EntityPointer" },
      { "field": "camera_anchor", "type": "EntityPointer" },
      { "field": "looked_through_by_uid", "type": "EntityUID" },
      {
        "field": "unknown",
        "type": "Float",
        "comment": "seems to be distance between camera_anchor and telescope, but it's off by a little"
      }
    ],
    "Torch": [
      {
        "vftablefunctions": {
          "93": {
            "name": "light_up",
            "params": "bool lit"
          },
          "94": {
            "name": "get_flame_offset",
            "params": "Vec2& output",
            "return": "Vec2&"
          },
          "95": {
            "name": "get_flame_type",
            "return": "ENT_TYPE"
          }
        }
      },
      { "field": "flame_uid", "type": "EntityUID" },
      { "field": "is_lit", "type": "Bool" },
      { "field": "unknown1", "type": "Byte" },
      { "field": "unknown2", "type": "Word" }
    ],
    "WallTorch": [
      {
        "field": "no_reward",
        "type": "Bool",
        "comment": "if false, it will drop gold when light up"
      }
    ],
    "Chain": [
      { "field": "attached_to_uid", "type": "EntityUID" },
      { "field": "timer", "type": "Dword" }
    ],
    "Fly": [{ "field": "timer", "type": "UnsignedByte" }],
    "OlmecCannon": [
      { "vftablefunctions": { "93": { "name": "spawn_projectile" } } },
      { "field": "timer", "type": "UnsignedWord" },
      { "field": "bombs_left", "type": "UnsignedByte" }
    ],
    "OlmecShip": [
      { "field": "sound_pos", "type": "SoundMeta" },
      { "field": "unknown138", "type": "DataPointer" },
      { "field": "door_fx", "type": "EntityPointer" },
      { "field": "smoke_particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "flight_time", "type": "UnsignedWord" },
      { "field": "unknown152", "type": "Word" },
      { "field": "has_spawned_jetflames", "type": "Bool" }
    ],
    "Landmine": [
      {
        "field": "timer",
        "type": "Dword",
        "comment": "explodes at 57, if you set it to 58 will count to overflow"
      }
    ],
    "Honey": [{ "field": "wiggle_timer", "type": "UnsignedByte" }],
    "PlayerGhost": [
      { "field": "sparkles_particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "player_inputs", "type": "PlayerSlot", "pointer": true },
      { "field": "inventory", "type": "PlayerInventory", "pointer": true },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "body", "type": "EntityUID" },
      { "field": "unknown_timer", "type": "UnsignedWord" },
      { "field": "shake_timer", "type": "UnsignedByte" },
      { "field": "boost_timer", "type": "UnsignedByte" },
      { "field": "unknown_timer2", "type": "UnsignedByte" },
      { "field": "padding1", "type": "Byte" },
      { "field": "padding2", "type": "Byte" },
      { "field": "padding3", "type": "Byte" },
      { "field": "padding4", "type": "Dword" },
      { "field": "unknown", "type": "DataPointer" }
    ],
    "GhostBreath": [
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      { "field": "timer", "type": "UnsignedWord" },
      { "field": "big_cloud", "type": "Bool" },
      {
        "field": "expand?",
        "type": "Bool",
        "comment": "when set true on start makes it go further"
      }
    ],
    "PlayerBag": [
      { "field": "bombs", "type": "Byte" },
      { "field": "ropes", "type": "Byte" }
    ],
    "LaserBeam": [
      { "field": "sparks", "type": "ParticleEmitterInfoPointer" },
      { "field": "emitted_light", "type": "IlluminationPointer" }
    ],
    "TreasureHook": [{ "field": "sound", "type": "SoundMeta" }],
    "AxolotlShot": [
      { "field": "unknown1", "type": "UnknownPointerGroup" },
      { "field": "trapped_uid", "type": "EntityUID" },
      { "field": "size", "type": "Float" },
      {
        "field": "swing",
        "type": "Float",
        "comment": "always swings to the right first"
      },
      {
        "field": "swing_periodicity",
        "type": "Float",
        "comment": "how often switch from right to left swing"
      },
      { "field": "distance_after_capture", "type": "Float" },
      { "field": "unknown2", "type": "UnsignedByte" },
      { "field": "unknown3", "type": "UnsignedByte" },
      { "field": "unknown4", "type": "UnsignedWord" }
    ],
    "SkullDropTrap": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "left_skull_uid", "type": "EntityUID" },
      { "field": "middle_skull_uid", "type": "EntityUID" },
      { "field": "right_skull_uid", "type": "EntityUID" },
      { "field": "left_skull_drop_time", "type": "UnsignedByte" },
      { "field": "middle_skull_drop_time", "type": "UnsignedByte" },
      { "field": "right_skull_drop_time", "type": "UnsignedByte" },
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "counts from 60 3 times, the last time dropping the skulls, then random longer timer for reset"
      }
    ],
    "FrozenLiquid": [
      {
        "field": "unknown1",
        "type": "Dword",
        "comment": "have problem cheeking those, looks like unused memory, but then, it's always zeros on spawn, changing it can crash the game"
      },
      { "field": "unknown2", "type": "Dword" }
    ],
    "Switch": [
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "has to be 0 before next use"
      }
    ],
    "FlyHead": [{ "field": "vored_entity_uid", "type": "EntityUID" }],
    "SnapTrap": [
      { "field": "bait_uid", "type": "EntityUID" },
      { "field": "reload_timer", "type": "UnsignedByte" }
    ],
    "EmpressGrave": [
      { "field": "fx_button", "type": "EntityPointer" },
      { "field": "ghost", "type": "EntityPointer" }
    ],
    "Tentacle": [{ "field": "bottom", "type": "EntityPointer" }],
    "MiniGameShip": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "velocity_x", "type": "Float" },
      { "field": "velocity_y", "type": "Float" },
      { "field": "swing", "type": "Float", "comment": "angle change?" },
      {
        "field": "up_down_normal",
        "type": "Float",
        "comment": "0.0 means down, 1.0 means up, 0.5 idle"
      }
    ],
    "MiniGameAsteroid": [{ "field": "spin_speed", "type": "Float" }],
    "CursedPot": [
      { "field": "smoke", "type": "ParticleEmitterInfoPointer" },
      { "field": "smoke2", "type": "ParticleEmitterInfoPointer" }
    ],
    "Orb": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "timer", "type": "UnsignedByte" }
    ],
    "EggSac": [{ "field": "timer", "type": "UnsignedByte" }],
    "Goldbar": [
      {
        "field": "unknown_shine",
        "type": "UnsignedByte",
        "comment": "gets updated every time animation_frame is changes by the game, setting it to 64 or less disables the effect"
      }
    ],
    "Coin": [{ "field": "nominal_price", "type": "UnsignedDword" }],
    "RollingItem": [
      {
        "vftablefunctions": {
          "94": {
            "name": "pickup",
            "params": "Entity* who, bool",
            "comment": "disable for item to be unpickable"
          }
        }
      },
      {
        "field": "roll_speed",
        "type": "Float",
        "comment": "only positive numbers"
      }
    ],
    "ParachutePowerup": [
      {
        "field": "falltime_deploy",
        "type": "UnsignedByte",
        "comment": "this gets compared with users falling_timer"
      },
      { "field": "unknown1", "type": "UnsignedByte" },
      { "field": "unknown2", "type": "UnsignedWord" },
      { "field": "unknown3", "type": "UnsignedWord" },
      {
        "field": "deploy",
        "type": "Bool",
        "comment": "if you set only this one it will crash the game after a while, also won't add new parachute to inventory"
      },
      { "field": "deploy2?", "type": "Bool" },
      {
        "field": "after_deploy",
        "type": "Bool",
        "comment": "if set to true before deploying, parachute will drop imminently after deploy"
      }
    ],
    "TrueCrownPowerup": [{ "field": "timer", "type": "UnsignedWord" }],
    "AnkhPowerup": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "player", "type": "EntityPointer" },
      { "field": "fx_glow", "type": "EntityPointer" },
      { "field": "unknown1", "type": "Float" },
      { "field": "timer1", "type": "UnsignedWord" },
      { "field": "timer2", "type": "UnsignedWord" },
      { "field": "timer3", "type": "UnsignedWord" },
      { "field": "music_on_off", "type": "Bool" }
    ],
    "Teleporter": [
      {
        "field": "teleport_number",
        "type": "UnsignedWord",
        "comment": "max 3, need to stand on the ground to reset"
      }
    ],
    "Boomerang": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "trail", "type": "ParticleEmitterInfoPointer" },
      { "field": "distance", "type": "Float" },
      { "field": "rotation", "type": "Float" },
      { "field": "wall_collision?", "type": "Float" },
      { "field": "state?", "type": "UnsignedByte" },
      { "field": "unused1", "type": "UnsignedByte" },
      { "field": "unused2", "type": "UnsignedWord" },
      {
        "field": "returns_to_uid",
        "type": "EntityUID",
        "comment": "entity to return to"
      },
      {
        "field": "unknown1",
        "type": "UnsignedWord",
        "comment": "something when the boomerang can't get to you"
      },
      { "field": "unknown2", "type": "UnsignedByte" }
    ],
    "Excalibur": [{ "field": "in_stone", "type": "Bool" }],
    "Shield": [{ "field": "shake", "type": "Float" }],
    "Bat": [
      { "field": "spawn_x", "type": "Float" },
      { "field": "spawn_y", "type": "Float" }
    ],
    "Terra": [
      {
        "field": "fx_button",
        "type": "EntityPointer",
        "comment": "used in the camp"
      },
      { "field": "x_pos", "type": "Float" },
      { "field": "unknown", "type": "UnsignedWord" },
      { "field": "abuse_speechbubble_timer", "type": "UnsignedWord" }
    ],
    "EggshipCenterJetFlame": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "unknown2", "type": "Qword" },
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "smoke_on", "type": "Bool" }
    ],
    "MiniGameShipOffset": [
      { "field": "offset_x", "type": "Float" },
      {
        "field": "offset_y",
        "type": "Float",
        "comment": " = y but also special_offsety"
      },
      { "field": "unknown2", "type": "Float" },
      {
        "field": "normal_y_offset",
        "type": "Float",
        "comment": "is added to offset_y"
      }
    ],
    "Button": [
      {
        "field": "button_sprite",
        "type": "Flags8",
        "flags": {
          "1": "pad: A, key: Z",
          "2": "pad: X, key: X",
          "3": "pad: B, key: C",
          "4": "pad: Y, key: D",
          "5": "pad: LB, key: L Shift",
          "6": "pad: RB, key: A",
          "7": "pad: menu?, key: (none)",
          "8": "pad: copy?, key: Tab"
        },
        "comment": "changes the button shown, setting more then one defaults to the first"
      },
      { "field": "unknown2", "type": "Byte" },
      { "field": "padding1", "type": "Word" },
      { "field": "visibility", "type": "Float" },
      {
        "field": "is_visible2?",
        "type": "Bool",
        "comment": "it's false for selldialog used in shops"
      },
      {
        "field": "player_trigger?",
        "type": "Bool",
        "comment": "it's set true even if player does not see the button, like the drill or COG door"
      },
      { "field": "unknown4", "type": "Bool" },
      { "field": "padding2", "type": "Byte" },
      {
        "field": "player1_on_screen_timer?",
        "type": "Dword",
        "comment": "a weird one, does not start at 0, sometimes accessed as byte, similar to the jetpack fly_counter, that is not per button, also some buttons use it, some not"
      },
      {
        "field": "player2_on_screen_timer?",
        "type": "Dword",
        "comment": "they all are not even per player, as they run in sync"
      },
      {
        "field": "player3_on_screen_timer?",
        "type": "Dword",
        "comment": "timers sometimes stay, sometimes are set back to -1"
      },
      { "field": "player4_on_screen_timer?", "type": "Dword" },
      {
        "field": "seen",
        "type": "State8",
        "states": {
          "-1": "hasn't been seen",
          "0": "last seen by player 1",
          "1": "last seen by player 2",
          "2": "last seen by player 3",
          "3": "last seen by player 4"
        }
      },
      { "field": "unknown11", "type": "Byte" },
      { "field": "padding3", "type": "Word" },
      {
        "field": "unknown12",
        "type": "CodePointer",
        "comment": "used in basecamp with buttons attached to BG_TUTORIAL_SING"
      }
    ],
    "FxTornJournalPage": [
      { "field": "page_number", "type": "Dword", "comment": "only in tutorial" }
    ],
    "FxMainExitDoor": [
      { "field": "emitted_light", "type": "IlluminationPointer" },
      {
        "field": "timer",
        "type": "Dword",
        "comment": "when breaking open in tutorial"
      },
      { "field": "unknown", "type": "Float", "comment": "increments by 0.15" }
    ],
    "Birdies": [
      {
        "field": "unknown",
        "type": "UnsignedByte",
        "comment": "animation_frame offset? , 0 for monsters, 160 for character"
      }
    ],
    "Explosion": [{ "field": "emitted_light", "type": "IlluminationPointer" }],
    "FxOuroboroOccluder": [
      {
        "field": "unknown",
        "type": "Float",
        "comment": "counts from 0.0 to 10.0"
      }
    ],
    "FxOuroboroDragonPart": [
      { "field": "unknown1", "type": "Float", "comment": "angle?" },
      { "field": "unknown2", "type": "Float", "comment": "fade in/fade out?" },
      { "field": "unknown3", "type": "Float" },
      {
        "field": "speed?",
        "type": "Float",
        "comment": "increment value for unknown1"
      },
      {
        "field": "timer?",
        "type": "Word",
        "comment": "affects the speed and fade away"
      },
      { "field": "padding1?", "type": "Word" },
      { "field": "padding2?", "type": "Dword" },
      { "field": "particle", "type": "ParticleEmitterInfoPointer" }
    ],
    "Rubble": [
      {
        "field": "unknown1",
        "type": "UnsignedByte",
        "comment": "is different depending of the block source"
      },
      { "field": "unknown2", "type": "Byte" },
      { "field": "unknown3", "type": "Word" },
      { "field": "unknown4", "type": "Dword" },
      { "field": "unknown5", "type": "Float" },
      {
        "field": "unknown6",
        "type": "Bool",
        "comment": "shrinks it down to nothing?"
      }
    ],
    "FxCompass": [
      { "field": "unknown1", "type": "Float", "comment": "moving distance" },
      {
        "field": "sine_angle",
        "type": "Float",
        "comment": "counts form 0 to 2*pi, responsible for moving back and forth"
      },
      { "field": "visibility", "type": "Float" },
      { "field": "is_active", "type": "Bool", "comment": "player has compass" }
    ],
    "Portal": [
      { "field": "UnknownPointerGroup", "type": "UnknownPointerGroup" },
      { "field": "unknown4", "type": "DataPointer" },
      { "field": "unknown5", "type": "DataPointer" },
      { "field": "unknown6", "type": "DataPointer" },
      { "field": "emitted_light", "type": "IlluminationPointer" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "unknown7", "type": "Float" },
      { "field": "transition_timer", "type": "UnsignedByte" },
      { "field": "level", "type": "UnsignedByte" },
      { "field": "world", "type": "UnsignedByte" },
      { "field": "theme", "type": "UnsignedByte" },
      { "field": "timer", "type": "Dword" }
    ],
    "SleepBubble": [{ "field": "show_hide_timer", "type": "UnsignedByte" }],
    "Powerup": [
      {
        "vftablefunctions": {
          "93": {
            "name": "get_hud_sprite",
            "params": "SpritePosition& output",
            "return": "SpritePosition&"
          },
          "94": {
            "name": "apply_effect",
            "params": "PowerupCapable* who"
          },
          "95": {
            "name": "remove_effect",
            "params": "PowerupCapable* who",
            "comment": "does not remove powerup from the powerups map"
          },
          "96": {
            "name": "on_putting_on",
            "params": "PowerupCapable* who",
            "comment": "only for backpacks, sets offsets etc."
          },
          "97": {
            "name": "on_putting_off",
            "params": "PowerupCapable* who",
            "comment": "only for backpacks"
          },
          "98": {
            "name": "in_use",
            "return": "bool",
            "comment": "for jetpack returns jetpack.flame_on, for capes Cape.floating_down, for hoverpack hoverpack.is_on, teleporter, powerpack and all other powerups return false"
          }
        }
      }
    ],
    "MovingIcon": [
      {
        "field": "movement_timer",
        "type": "UnsignedByte",
        "comment": "used to move it up and down"
      }
    ],
    "FxSaleContainer": [
      { "field": "fx_value", "type": "EntityPointer" },
      { "field": "fx_icon", "type": "EntityPointer" },
      { "field": "fx_button", "type": "EntityPointer" },
      {
        "field": "shake_amplitude",
        "type": "Float",
        "comment": "for effect when you don't have enough money"
      },
      {
        "field": "sound_trigger",
        "type": "Bool",
        "comment": "also sound_played, keeps re-triggering from time to time"
      },
      { "field": "pop_in_out_percentage", "type": "UnsignedByte" }
    ],
    "FxPickupEffect": [
      { "field": "spawn_y", "type": "Float" },
      {
        "field": "visibility",
        "type": "Float",
        "comment": "or the disappearing animation progression"
      }
    ],
    "FxShotgunBlast": [
      { "field": "illumination", "type": "IlluminationPointer" }
    ],
    "FxJetpackFlame": [
      { "field": "particle_smoke", "type": "ParticleEmitterInfoPointer" },
      { "field": "particle_flame", "type": "ParticleEmitterInfoPointer" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "illumination", "type": "IlluminationPointer" }
    ],
    "FxPlayerIndicator": [
      { "field": "attached_to", "type": "EntityUID" },
      { "field": "pos_x", "type": "Float" },
      { "field": "pos_y", "type": "Float" },
      { "field": "unknown", "type": "Dword" }
    ],
    "FxSpringtrapRing": [
      { "field": "timer", "type": "Dword" },
      { "field": "padding", "type": "Dword" },
      { "field": "illumination", "type": "IlluminationPointer" }
    ],
    "FxWitchdoctorHint": [
      { "field": "witchdoctor", "type": "StdSet", "keytype": "EntityUID" }
    ],
    "FxNecromancerANKH": [{ "field": "unknown", "type": "Float" }],
    "FxWebbedEffect": [{ "field": "visible", "type": "Bool" }],
    "FxUnderwaterBubble": [
      { "field": "unknown1", "type": "Float" },
      { "field": "bubble_source", "type": "EntityUID" },
      { "field": "direction", "type": "Byte" },
      {
        "field": "pop",
        "type": "Bool",
        "comment": "setting it true makes it disappear/fade away"
      },
      {
        "field": "inverted",
        "type": "Bool",
        "comment": "goes down instead of up"
      }
    ],
    "FxWaterDrop": [
      {
        "field": "inverted",
        "type": "Bool",
        "comment": "floats up instead of drooping down"
      },
      { "field": "unknown1", "type": "Bool" },
      { "field": "unknown2", "type": "Byte" },
      { "field": "unknown3", "type": "Byte" },
      { "field": "unknown4", "type": "Dword" },
      { "field": "droplet_source_uid", "type": "EntityUID" }
    ],
    "FxKinguSliding": [
      { "field": "particle", "type": "ParticleEmitterInfoPointer" }
    ],
    "FxAlienBlast": [{ "field": "unknown", "type": "Byte" }],
    "FxSparkSmall": [
      { "field": "unknown1", "type": "Float" },
      {
        "field": "step",
        "type": "Float",
        "comment": "per frame increment for variable above"
      },
      { "field": "unknown3", "type": "Float" },
      {
        "field": "timer",
        "type": "Byte",
        "comment": "all values gets randomized when timer = 0"
      }
    ],
    "FxTiamatHead": [{ "field": "timer", "type": "Word" }],
    "FxTiamatTorso": [
      { "field": "timer", "type": "Word" },
      { "field": "padding", "type": "Word" },
      {
        "field": "torso_target_size",
        "type": "Float",
        "comment": "slowly increases/decreases to the given value"
      }
    ],
    "FxTiamatTail": [
      {
        "field": "angle_two",
        "type": "Float",
        "comment": "added _two just to not shadow angle in entity"
      },
      { "field": "x_pos", "type": "Float" },
      { "field": "y_pos", "type": "Float" }
    ],
    "FxVatBubble": [{ "field": "max_y", "type": "Float" }],
    "FxHundunNeckPiece": [
      {
        "field": "kill_timer",
        "type": "Word",
        "comment": "short timer after the head is dead"
      }
    ],
    "FxJellyfishStar": [
      { "field": "rotation_angle", "type": "Float" },
      { "field": "radius", "type": "Float" },
      { "field": "speed", "type": "Float" }
    ],
    "FxQuickSand": [{ "field": "unknown", "type": "Float" }],
    "FxSorceressAttack": [
      { "field": "size", "type": "Float" },
      { "field": "unknown2", "type": "Float", "comment": "pulsing related" },
      { "field": "unknown3", "type": "Bool", "comment": "pulsing related" }
    ],
    "FxLamassuAttack": [
      { "field": "attack_angle", "type": "Float" },
      {
        "field": "attack_angle2",
        "type": "Float",
        "comment": "seems to be exactly the same as above"
      },
      { "field": "unknown", "type": "Bool" }
    ],
    "FxFireflyLight": [
      { "field": "illumination", "type": "IlluminationPointer" },
      { "field": "light_timer", "type": "UnsignedByte" },
      { "field": "padding", "type": "Byte" },
      {
        "field": "cooldown_timer",
        "type": "UnsignedWord",
        "comment": "timer between light flashes"
      }
    ],
    "FxEmpress": [{ "field": "sine_angle", "type": "Float" }],
    "FxAnkhRotatingSpark": [
      { "field": "radius", "type": "Float" },
      { "field": "inclination", "type": "Float" },
      {
        "field": "speed",
        "type": "Float",
        "comment": "a weird one, it gets values lower then 1.0, if you set 1.0 or bigger it will stop"
      },
      { "field": "sine_angle?", "type": "Float" },
      { "field": "size", "type": "Float" }
    ],
    "FxAnkhBrokenPiece": [{ "field": "unknown", "type": "Float" }],
    "BGBackLayerDoor": [
      { "field": "illumination", "type": "IlluminationPointer" },
      { "field": "illumination2", "type": "IlluminationPointer" }
    ],
    "BGSurfaceStar": [
      { "field": "blink_timer?", "type": "Dword", "comment": "why negative?" },
      { "field": "relative_x", "type": "Float" },
      { "field": "relative_y", "type": "Float" },
      { "field": "unknown_padding?", "type": "Dword" }
    ],
    "BGRelativeElement": [
      { "field": "relative_x", "type": "Float" },
      { "field": "relative_y", "type": "Float" }
    ],
    "BGSurfaceLayer": [
      { "field": "relative_offset_x", "type": "Float" },
      { "field": "relative_offset_y", "type": "Float" }
    ],
    "BGEggshipRoom": [
      { "field": "sound", "type": "SoundMeta" },
      { "field": "fx_shell", "type": "EntityPointer" },
      { "field": "fx_door", "type": "EntityPointer" },
      { "field": "platform_left", "type": "EntityPointer" },
      { "field": "platform_middle", "type": "EntityPointer" },
      { "field": "platform_right", "type": "EntityPointer" },
      { "field": "player_in", "type": "Bool" }
    ],
    "BGMovingStar": [
      {
        "field": "falling_speed",
        "type": "Float",
        "comment": "can make it rise if you set it to negative"
      }
    ],
    "BGTutorialSign": [{ "field": "is_shown", "type": "Bool" }],
    "ShootingStarSpawner": [{ "field": "timer", "type": "UnsignedWord" }],
    "BGShootingStar": [
      { "field": "x_increment", "type": "Float" },
      { "field": "y_increment", "type": "Float" },
      { "field": "timer", "type": "Word" },
      { "field": "max_timer", "type": "Word" },
      {
        "field": "size",
        "type": "Float",
        "comment": "gets smaller as the timer gets close to the max_timer"
      },
      {
        "field": "light_size?",
        "type": "Float",
        "comment": "if you make it the same as size it starts to flicker, making this bigger increases the size as well"
      }
    ],
    "BGShopEntrance": [{ "field": "on_entering", "type": "Bool" }],
    "BGFloatingDebris": [
      {
        "field": "distance",
        "type": "Float",
        "comment": "distance it travels up and down from spawn position"
      },
      { "field": "speed", "type": "Float" },
      { "field": "sine_angle", "type": "Float" }
    ],
    "BGShopKeeperPrime": [
      { "field": "normal_y", "type": "Float" },
      { "field": "sine_pos", "type": "Float" },
      { "field": "bubbles_timer", "type": "Word" },
      { "field": "bubble_spawn_trigger", "type": "Bool" },
      { "field": "unknown_padding", "type": "Byte" },
      {
        "field": "bubble_spawn_delay",
        "type": "Word",
        "comment": "normally it's just 0, 1 or 2, but you can set it to some value and then when using bubble_spawn_trigger it will count down and then spawn bubbles"
      }
    ],
    "LogicalDoor": [
      { "field": "connected_door_type", "type": "EntityDBID" },
      { "field": "unk2", "type": "Dword", "comment": "always 37?" },
      { "field": "not_hidden", "type": "Bool" },
      {
        "field": "platform_spawned",
        "type": "Bool",
        "comment": "is set true when you bomb the door, no matter what door, can't be reset"
      },
      { "field": "unk5", "type": "Bool" },
      { "field": "unk6", "type": "Bool" }
    ],
    "LogicalStaticSound": [
      { "field": "x_pos?", "type": "Float" },
      { "field": "y_pos?", "type": "Float" }
    ],
    "LogicalLiquidStreamSound": [
      {
        "field": "unknown",
        "type": "Float",
        "comment": "SoundMeta unknown10"
      }
    ],
    "LogicalSound": [{ "field": "sound", "type": "SoundMeta" }],
    "LogicalTrapTrigger": [
      {
        "field": "min_empty_distance",
        "type": "Dword",
        "comment": "used in bigspeartrap when it has to have minimum 2 free spaces to be able to trigger"
      },
      { "field": "trigger_distance", "type": "Dword", "comment": "in blocks" },
      { "field": "vertical", "type": "Bool" },
      { "field": "padding1", "type": "Byte" },
      { "field": "padding2", "type": "Word" },
      { "field": "padding3", "type": "Dword" }
    ],
    "JungleTrapTrigger": [
      {
        "field": "counter1?",
        "type": "Dword",
        "comment": "one of those weird counters that counts all the traps, not only this single one"
      },
      {
        "field": "counter2?",
        "type": "Dword",
        "comment": "also there are 3 of them?"
      },
      { "field": "counter3?", "type": "Dword" }
    ],
    "WetEffect": [
      { "field": "particle", "type": "ParticleEmitterInfoPointer" }
    ],
    "OnFireEffect": [
      { "field": "particle_smoke", "type": "ParticleEmitterInfoPointer" },
      { "field": "particle_flame", "type": "ParticleEmitterInfoPointer" },
      { "field": "illumination", "type": "IlluminationPointer" },
      { "field": "unknown", "type": "Bool" }
    ],
    "PoisonedEffect": [
      { "field": "particle_burst", "type": "ParticleEmitterInfoPointer" },
      { "field": "particle_base", "type": "ParticleEmitterInfoPointer" },
      { "field": "burst_timer", "type": "UnsignedWord" },
      {
        "field": "burst_active",
        "type": "Bool",
        "comment": "If forced to false, it will not play the sound or spawn burst particles"
      }
    ],
    "CursedEffect": [
      { "field": "particle", "type": "ParticleEmitterInfoPointer" },
      { "field": "sound", "type": "SoundMeta" }
    ],
    "OuroboroCameraAnchor": [
      { "field": "target_x", "type": "Float" },
      { "field": "target_y", "type": "Float" },
      { "field": "velocity_x", "type": "Float" },
      { "field": "velocity_y", "type": "Float" }
    ],
    "OuroboroCameraZoomin": [
      {
        "field": "zoomin_level",
        "type": "Float",
        "comment": "can be set to negative, seems to trigger the warp at some value"
      }
    ],
    "CinematicAnchor": [
      { "field": "blackbar_top", "type": "EntityPointer" },
      { "field": "blackbar_bottom", "type": "EntityPointer" },
      { "field": "roll_in", "type": "Float", "comment": "0 to 1.0" }
    ],
    "BurningRopeEffect": [
      { "field": "illumination", "type": "IlluminationPointer" },
      { "field": "sound", "type": "SoundMeta" }
    ],
    "DustWallApep": [
      { "field": "particle", "type": "ParticleEmitterInfoPointer" }
    ],
    "CameraFlash": [
      { "field": "illumination1", "type": "IlluminationPointer" },
      { "field": "illumination2", "type": "IlluminationPointer" },
      { "field": "unknown", "type": "Qword" },
      { "field": "timer", "type": "UnsignedByte" }
    ],
    "RoomLight": [{ "field": "illumination", "type": "IlluminationPointer" }],
    "LimbAnchor": [
      { "field": "x_pos", "type": "Float" },
      { "field": "y_pos", "type": "Float" },
      { "field": "hand/feet_x_offset", "type": "Float" },
      { "field": "hand/feet_y_offset", "type": "Float" },
      { "field": "anchor_x", "type": "Float" },
      { "field": "anchor_y", "type": "Float" },
      { "field": "move_origin_x", "type": "Float" },
      { "field": "move_origin_y", "type": "Float" },
      { "field": "move_destination_x", "type": "Float" },
      { "field": "move_destination_y", "type": "Float" },
      { "field": "unk11", "type": "Float" },
      { "field": "unk12", "type": "Float" },
      { "field": "unk13", "type": "Float" },
      { "field": "elapsed_move_time", "type": "UnsignedByte" },
      { "field": "move_duration", "type": "UnsignedByte" },
      { "field": "flip_vertical", "type": "Bool" }
    ],
    "LogicalConveyorbeltSound": [
      { "field": "unknown", "type": "UnknownPointerGroup", "comment": "why?" }
    ],
    "LogicalAnchovyFlock": [
      {
        "field": "current_speed",
        "type": "Float",
        "comment": "increases until max_speed reached"
      },
      { "field": "max_speed", "type": "Float" },
      { "field": "timer", "type": "UnsignedWord" }
    ],
    "MummyFliesSound": [
      { "field": "mummy_uid", "type": "EntityUID" },
      {
        "field": "flies?",
        "type": "UnsignedByte",
        "comment": "numbers of flies spawned? need to take another look, very cool"
      },
      { "field": "padding1", "type": "Byte" },
      { "field": "padding2", "type": "Word" },
      {
        "field": "unknown",
        "type": "UnknownPointerGroup",
        "comment": "why? because of this this entity falls into the larger bucket"
      }
    ],
    "QuickSandSound": [
      { "field": "counter?", "type": "Dword", "comment": "probably unsigned?" }
    ],
    "IceSlidingSound": [
      { "field": "counter?", "type": "Dword", "comment": "probably unsigned?" }
    ],
    "FrostBreathEffect": [{ "field": "timer", "type": "UnsignedWord" }],
    "BoulderSpawner": [
      {
        "field": "timer",
        "type": "Dword",
        "comment": "can be set negative for longer time period, spawns boulder at 150, setting it higher with count to overflow"
      },
      { "field": "owner_uid", "type": "EntityUID" },
      { "field": "sound", "type": "SoundMeta" }
    ],
    "PipeTravelerSound": [
      {
        "field": "sound_speed?",
        "type": "Float",
        "comment": "SoundMeta -> VALUE"
      },
      { "field": "counter?", "type": "Dword", "comment": "probably unsigned?" },
      {
        "field": "unknown1",
        "type": "Byte",
        "comment": "enter/exit sound time duration?"
      },
      {
        "field": "unknown2",
        "type": "Byte",
        "comment": "enter/exit sound time duration?"
      },
      { "field": "enter_exit", "type": "Bool" }
    ],
    "LogicalDrain": [
      {
        "field": "timer",
        "type": "UnsignedByte",
        "comment": "little delay between pulling blob of liquid thru"
      }
    ],
    "LogicalRegeneratingBlock": [{ "field": "timer", "type": "UnsignedByte" }],
    "SplashBubbleGenerator": [{ "field": "timer", "type": "UnsignedByte" }],
    "EggplantThrower": [
      {
        "field": "unknown",
        "type": "Bool",
        "comment": "allow throw again when it's false? hard to test"
      }
    ],
    "LogicalMiniGame": [
      {
        "field": "timer",
        "type": "UnsignedWord",
        "comment": "delay between spawning ufo"
      }
    ],
    "DMSpawning": [
      { "field": "spawn_x", "type": "Float" },
      { "field": "spawn_y", "type": "Float" },
      { "field": "sine_pos", "type": "Float" },
      { "field": "timer", "type": "UnsignedByte" }
    ],
    "DMAlienBlast": [
      { "field": "owner_uid", "type": "EntityUID" },
      { "field": "unknown", "type": "Dword" },
      { "field": "fx_internal_reticule", "type": "EntityPointer" },
      { "field": "fx_external_reticule", "type": "EntityPointer" },
      { "field": "sound", "type": "SoundMeta" },
      { "field": "timer", "type": "UnsignedByte" }
    ],
    "CrossBeam": [
      { "field": "attached_to_side_uid", "type": "EntityUID" },
      { "field": "attached_to_top_uid", "type": "EntityUID" }
    ],
    "PalaceSign": [
      { "field": "sound", "type": "SoundMeta" },
      {
        "field": "illumination",
        "type": "IlluminationPointer",
        "comment": "illumination1/2 used only in dark level, no pointer in normal level"
      },
      { "field": "arrow_illumination", "type": "IlluminationPointer" },
      { "field": "arrow_change_timer", "type": "UnsignedByte" }
    ],
    "DecoRegeneratingBlock": [
      { "field": "unknown1", "type": "Byte" },
      {
        "field": "unknown2",
        "type": "UnsignedByte",
        "comment": "timer after self_destruct is triggered, modifies the size depending of the unknown1"
      },
      {
        "field": "self_destruct?",
        "type": "Bool",
        "comment": "have reverse effect of spawning in after the block is broken, unused in the game?"
      }
    ],
    "DestructibleBG": [
      { "field": "attached_to_1?", "type": "EntityUID" },
      { "field": "attached_to_2?", "type": "EntityUID" },
      { "field": "unknown1", "type": "Bool" },
      { "field": "unknown2", "type": "Bool" }
    ],
    "EggShipDoorS": [{ "field": "entered", "type": "Bool" }],
    "PrizeDispenser": [
      {
        "field": "itemid_1",
        "type": "UnsignedByte",
        "comment": "ids (0 - 24) for the table with items, all set on spawn"
      },
      { "field": "itemid_2", "type": "UnsignedByte" },
      { "field": "itemid_3", "type": "UnsignedByte" },
      { "field": "itemid_4", "type": "UnsignedByte" },
      { "field": "itemid_5", "type": "UnsignedByte" },
      { "field": "itemid_6", "type": "UnsignedByte", "comment": "unused" },
      { "field": "prizes_spawned", "type": "UnsignedByte" },
      { "field": "padding", "type": "Byte" }
    ],
    "JungleSpearTrap": [],
    "MegaJellyfishEye": [{ "field": "timer", "type": "UnsignedByte" }],
    "Bow": [
      {
        "vftablefunctions": {
          "93": {
            "name": "get_arrow_special_offset",
            "return": "float",
            "comment": "When laying on the ground"
          }
        }
      }
    ],
    "Purchasable": [
      {
        "vftablefunctions": {
          "93": {
            "name": "acquire",
            "params": "Entity* who",
            "comment": "does not consume money"
          }
        }
      }
    ],
    "DummyPurchasableEntity": [
      {
        "vftablefunctions": {
          "94": {
            "name": "trigger_explosion",
            "params": "Entity* who",
            "comment": "Transfers ownership etc. for who to blame, sets the exploding bool"
          }
        }
      },
      { "field": "replace_entity", "type": "EntityPointer" },
      { "field": "exploding", "type": "Bool" },
      { "field": "explosion_timer", "type": "UnsignedByte" }
    ],
    "Present": [{ "field": "inside", "type": "EntityDBID" }],
    "Web": [
      {
        "field": "decay_rate",
        "type": "Float",
        "comment": "Is subtracted from the color alpha every frame after the `stand_counter` is more than 300"
      }
    ],
    "CrushElevator": [
      {
        "field": "y_limit",
        "type": "Float",
        "comment": "does don't actually exist, added for compatibility with OL API"
      },
      {
        "field": "speed",
        "type": "Float",
        "comment": "does don't actually exist, added for compatibility with OL API"
      }
    ],
    "Scepter": [{ "field": "cooldown", "type": "UnsignedByte" }],
    "Whip": [{ "field": "flaming", "type": "Bool" }]
  }
}
